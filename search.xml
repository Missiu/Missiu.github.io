<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>低成本+高效发布blog+多端同步的笔记方案</title>
    <url>/c1262c9c/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<ol>
<li>本文档不是手把手教程</li>
<li>博客是使用hexo+next主题魔改搭建到github</li>
</ol>
<h2 id="我的需求">我的需求</h2>
<ol>
<li>编辑笔记方便，一般使用md语法，需要放图片在笔记里</li>
<li>有内容产出，需要很方便的发布博客，方便全局搜索，也方便查看</li>
<li>数据可靠，喜欢把数据放在本地，管理方便自由程度高</li>
<li>多端同步，很多时候在平板上也需要有笔记产出，主要电脑编辑，其他设备查看</li>
<li>数据备份很重要</li>
<li>长期使用需要低成本</li>
</ol>
<h2 id="解决思路">解决思路</h2>
<h3 id="笔记软件选择">笔记软件选择</h3>
<p>市面上很多笔记软件较为有代表性的：</p>
<ul>
<li>神中神Typora：我很长一段时间都是用的Typora，Typora支持所见即所得的编辑模式。插入图片时，可以在界面上直接粘贴，Typora会自己把图片复制到指定的目录，Typora还能粘贴网页上带格式的富文本，自动转换成Markdown，但是功能也就局限于md编辑的良好体验上，没有多平台，不能满足我的大多数需求</li>
<li>obsidian：插件丰富，拓展性强，具备了md 的 大部分功能，虽然粘贴自动转换成Markdown的功能没有Typora好用，但是无伤大雅，具备丰富的插件更能适配我的较高需求，而且多平台都有软件</li>
<li>印象笔记、语雀、Effie，等等等等，数据都没在本地，直接排除</li>
</ul>
<p>所以选择obsidian作为编辑笔记软件</p>
<h3 id="多端同步">多端同步</h3>
<p><strong>笔记编辑的图片问题：</strong><br>
之前使用图床+piclist进行图片上传，这样就不需要担心图片怎么上传到博客的问题，但是在图片的管理方面显得不太方便，较为杂乱，假如图片要更新，还需要在piclist里手动删除云端的图片，所以图片还是放在本地，随着博客一起上传</p>
<p><strong>多端同步成本问题：</strong><br>
obsidian有官方同步、有同步插件，等等，详细可以见：<a href="https://forum-zh.obsidian.md/t/topic/29995">对已知的obsidian同步方式进行整理</a>我这里综合考量使用的微力同步，免费，可以使用自己的私有节点进行同步，数据安全有保障，并且他是同步文件夹，这就意味着可以在其他端同步obsidian的主题、插件等，满足需求。</p>
<h3 id="数据备份">数据备份</h3>
<p>这里选择很宽泛，也有很多的云盘同步备份策略，甚至可以上nas，我这里选择github，通过git提交数据到github的私有库+百度云自动备份+隔几周手动备份到移动硬盘</p>
<h3 id="便捷部署到博客">便捷部署到博客</h3>
<p>很幸运我在搜索相关内容的时候，发现了一篇宝藏文章，不仅为我提供了思路，还给出了Hexo的魔改代码：<a href="https://www.paincker.com/note-and-blog-system/">构建自己的笔记博客系统（程序员版）</a>可以参考其操作以及开源库</p>
<h2 id="步骤">步骤</h2>
<h3 id="笔记软件配置">笔记软件配置</h3>
<ol>
<li>多端安装obsidan</li>
<li>安装插件：
<ol>
<li>Clear Unused Images ：清除不使用的图片</li>
<li>Consistent Attachments and Links ： 插件可以设置把文章的图片都放在平级的images目录中，如果移动笔记，对应的图片也会被移动 （<strong>必须</strong>）</li>
<li>Markdown prettifier ： 整理Markdown格式</li>
<li>Mousewheel Imagezoom ： 能够通过滚动来增加/减少图像的大小</li>
<li>Templater ： 用来配置博客的Front-matter，参考文章：<a href="https://itreefly.com/posts/e5113722.html">Hexo和Obsidian：让个人博客写作更加优雅、高效</a> （<strong>必须</strong>）</li>
<li>Unique attachments ：使图片链接的名称唯一（基于文件内容的哈希值）</li>
</ol>
</li>
</ol>
<h3 id="多端同步配置">多端同步配置</h3>
<ol>
<li>多端下载微力同步</li>
<li><a href="https://www.verysync.com/manual/users/start.html">配置同步</a></li>
</ol>
<h3 id="快捷发布博客">快捷发布博客</h3>
<ol>
<li>使用 <a href="https://github.com/jzj1993/PublishMarkdown">https://github.com/jzj1993/PublishMarkdown</a> 搭建hexo博客</li>
<li>先在本地跑起来，记得把测试文件移入<code>_posts</code>文件夹下</li>
<li>发布到github 参考：<a href="https://blog.soilove.cn/2020/06/14/blog-hexo-2-github-or-oss/#:~:text=Hexo%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA,%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E5%8F%91%E5%B8%83%E3%80%82">使用Github或阿里云OSS托管你的Hexo博客</a></li>
<li>自定义hexo主题 参考：<a href="https://blog.csdn.net/as480133937/article/details/100138838">Hexo-Next 主题博客个性化配置超详细，超全面(两万字)</a></li>
<li>创建软连接，obsidian里的<code>Notes\blog </code>-&gt; 博客里<code> Blog\source\_posts</code> 这样编辑完文章只要把改文章拖到obsidian的blog目录下，就放在了博客文章目录里</li>
<li>创建<code>deploy.sh</code>的快捷链接，放到obsidian的一个目录里，点一下就可以增量部署到博客</li>
</ol>
<h3 id="补充">补充</h3>
<p>其他插件：</p>
<ul>
<li>笔记分享：可以用Pandoc插件的导出功能，把Markdown导出成HTML / Word / PDF文件分享给其他人。</li>
<li>笔记同步：在Obsidian的Terminal插件提供的窗口中运行git命令，把最新的博客push到私有git仓库。也可以选择用Obsidian Git插件把数据同步上去。在其他设备上通过git再把变更同步下来。</li>
</ul>
<p>参考文章：</p>
<ul>
<li><a href="https://forum-zh.obsidian.md/t/topic/29995">对已知的obsidian同步方式进行整理</a></li>
<li><a href="https://www.paincker.com/note-and-blog-system/">构建自己的笔记博客系统（程序员版）</a></li>
<li><a href="https://itreefly.com/posts/e5113722.html">Hexo和Obsidian：让个人博客写作更加优雅、高效</a></li>
<li><a href="https://blog.soilove.cn/2020/06/14/blog-hexo-2-github-or-oss/#:~:text=Hexo%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA,%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E5%8F%91%E5%B8%83%E3%80%82">使用Github或阿里云OSS托管你的Hexo博客</a></li>
<li><a href="https://blog.csdn.net/as480133937/article/details/100138838">Hexo-Next 主题博客个性化配置超详细，超全面(两万字)</a></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>效率</tag>
        <tag>工具</tag>
        <tag>备份</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>一篇6.5k字的CSS总结</title>
    <url>/72397b90/</url>
    <content><![CDATA[<h1>前言</h1>
<ol>
<li>作为学习笔记，可能存在一些错误，若发现望指正，万分感激</li>
<li>文档编写时间已经比较久，可能存在过时信息</li>
<li>意写成类似 HTML 参考文档的形式，方便以后复习查阅~</li>
</ol>
<h1>浅品 CSS</h1>
<h2 id="一、常用语法与基本概念">一、常用语法与基本概念</h2>
<h3 id="1、CSS-是什么">1、CSS 是什么</h3>
<p><em><strong>C</strong>ascading <strong>S</strong>tyle <strong>S</strong>heets（层叠样式表）</em><br>
CSS 是一门基于规则的语言 —— 你能定义用于你的网页中特定元素样式的一组规则。<br>
让你的网页更加美观。</p>
<ul>
<li>用来定义页面元素的样式</li>
<li>设置字体和颜色</li>
<li>设置位置和大小</li>
<li>添加动画效果</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">5em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就像上面的代码一样，CSS 语法由<strong>选择器 (selector)</strong>+<strong>{}</strong> ，在大括号内部定义一个或多个形式为  <strong>属性 (property):值 (value);</strong>   的  <strong>声明 (declarations)</strong> 。</p>
<h3 id="2、css-的引入">2、css 的引入</h3>
<ol>
<li>内联样式(行内样式)</li>
</ol>
<p>要使用内联样式，你需要在相关的标签内使用样式(style) 属性。Style 属性可以包含任何 CSS 属性，<strong>缺点</strong>是缺乏整体性和规划性，不利于维护，维护成本高</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--内联--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;&quot;</span>&gt;</span>example<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>内部样式</li>
</ol>
<p>当单个文档需要特殊的样式时，就应该使用内部样式表。你可以使用<code>&lt;style&gt;</code> 标签在文档头部定义内部样式表， <strong>缺点</strong> 是单个页面内的 CSS 代码具有统一性和规划性,便于维护，但是在多个页面之间容易混乱</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--嵌入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">li</span>&#123;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span>&#123;&#125;</span></span><br><span class="line"><span class="css">&lt;style&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>外部样式(推荐)</li>
</ol>
<p>当样式需要应用于很多页面时，外部样式表将是理想的选择。在使用外部样式表的情况下，你可以通过改变一个文件来改变整个站点的外观。每个页面使用<link> 标签链接到样式表。<link> 标签在(文档的)头部</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--外链--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中<strong>外链</strong>（推荐)，<strong>嵌入</strong>（常常用与组件开发），<strong>内联</strong>（不推荐）就是 CSS 的生效地点不同而产生的不同使用方式</p>
<h3 id="3、选择器">3、选择器</h3>
<h4 id="3-1、-选择器">3.1、<strong><code>*</code></strong> 选择器</h4>
<p><strong>通配选择器</strong> 也叫全局选择器 ， 顾名思义，全局选择器可以与任何元素匹配，优先级最低，一般做样式初始化</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>：<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2、-标签-选择器">3.2、 <strong><code>标签</code></strong> 选择器</h4>
<p>也叫 元素选择器，HTML 文档中的元素，<code>p. b. div、 a. img、 body</code> 等。它选择的是页面上所有这种类型的标签,所以经常描述”共性”，无法描述某一个元素的“个性”</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h3</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: coral;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-3、-id选择器">3.3、 <strong>id</strong>选择器</h4>
<p>在 HTML 中给组件绑定 id，在 CSS 中以#开头+id 名来达到选择效果，值得注意的是 id 值必须是唯一的，并且 id 不能以数字开头</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">p</span> id=&quot;exciting&quot;&gt;这里是id选择器代码展示&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line"></span><br><span class="line"> <span class="selector-id">#exciting</span>&#123;</span><br><span class="line">       <span class="attribute">background</span>:</span><br><span class="line">       border:</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-4、合并-选择器">3.4、<strong>合并</strong> 选择器</h4>
<p>可以使用 <code>,</code> 把不同的标签或者不同的类合并到同一个样式，可以减少代码重复；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-5、-class-选择器">3.5、 <strong><code>class</code></strong> 选择器</h4>
<p>与 id 选择器类似但是是以 class 的属性名来决定，不同的是其中 class 的值可以出现多次，</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">  hello</span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;b  c&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.a</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="comment">/*先执行选择器b 再执行选择器c*/</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.b</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.c</span> &#123;</span></span><br><span class="line"><span class="css">        fount-size: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="5-6、属性-选择器">5.6、<strong>属性</strong> 选择器</h4>
<ul>
<li>
<p><code>[attr]</code>表示带有以  <em>attr</em>  命名的属性的元素。</p>
</li>
<li>
<p><code>[attr=value]</code>表示带有以  <em>attr</em>  命名的属性，且属性值为_值_  的元素。</p>
</li>
<li>
<p><code>[attr~=value]</code>表示带有以  <em>attr</em>  命名的属性的元素，并且该属性是一个以空格作为分隔的值列表，其中至少有一个值为_值_。</p>
</li>
<li>
<p><code>[attr|=value]</code>表示带有以  <em>attr</em>  命名的属性的元素，属性值为“value”或是以“value-”为前缀（“”为连字符，Unicode 编码为 U+002D）开头。典型的应用场景是用来匹配语言简写代码（如 zh-CN，zh-TW 可以用 zh 作为 value）。<code>-</code></p>
</li>
<li>
<p><code>[attr^=value]</code>表示带有以  <em>attr</em>  命名的属性，且属性值是以 *value *开头的元素。</p>
</li>
<li>
<p><code>[attr$=value]</code>表示带有以  <em>attr</em>  命名的属性，且属性值是以 *value *结尾的元素。</p>
</li>
<li>
<p><code>[attr*=value]</code>表示带有以  <em>attr</em>  命名的属性，且属性值至少包含一个 *value *值的元素。</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 存在 title 属性的&lt;a&gt; 元素 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[title]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: purple;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 存在 href 属性并且属性值匹配&quot;https://example.org&quot;的&lt;a&gt; 元素 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href=<span class="string">&quot;https://example.org&quot;</span>]</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 存在 href 属性并且属性值包含&quot;example&quot;的&lt;a&gt; 元素 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href*=<span class="string">&quot;example&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 存在 href 属性并且属性值结尾是&quot;.org&quot;的&lt;a&gt; 元素 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href$=<span class="string">&quot;.org&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 存在 class 属性并且属性值包含以空格分隔的&quot;logo&quot;的&lt;a&gt;元素 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[class~=<span class="string">&quot;logo&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5-7、-伪类">5.7、 <strong>伪类</strong></h4>
<p>CSS <strong><em>伪类</em></strong>  是添加到选择器的关键字，指定要选择的元素的特殊状态。例如，<code>：hover</code>  可被用于在用户将鼠标悬停在按钮上时改变按钮的颜色。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 所有用户指针悬停的按钮 */</span></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="动态伪伪类">动态伪伪类</h5>
<ul>
<li><code>:link</code>元素被定义了超链接但并未被访问过</li>
<li><code>:visited</code>元素被定义了超链接并已被访问过</li>
<li><code>:active</code>元素被激活</li>
<li><code>:hover</code>鼠标悬停</li>
<li><code>:focus</code>元素获取焦点</li>
</ul>
<h5 id="UI-元素状态伪类">UI 元素状态伪类</h5>
<ul>
<li><code>:checked</code>选中的复选按钮或者单选按钮表单元素</li>
<li><code>:enabled</code>所有启用的表单元素</li>
<li><code>:disabled</code>所有禁用的表单元素</li>
</ul>
<h5 id="结构伪类选择器">结构伪类选择器</h5>
<ul>
<li><code>:fisrt-child</code>父元素的第一个子元素</li>
<li><code>:last-child</code>父元素的最后一个子元素的元素</li>
</ul>
<h4 id="5-8、关系选择器">5.8、<strong>关系</strong>选择器</h4>
<ol>
<li>后代选择器</li>
</ol>
<p>定义：选择<strong>所有</strong>被 E 元素包含的 F 元素，中间用空格隔开<br>
语法：<code>E F&#123;&#125;r</code></p>
<ol start="2">
<li>子代选择器</li>
</ol>
<p>定义：选择所有作为 E 元素的<strong>直接子元素</strong>F，对更深一层的元素不起作用，用<code>&gt;</code>表示<br>
语法： <code> E&gt;F&#123;&#125;</code></p>
<ol start="3">
<li>
<p>相邻兄弟选择器<br>
定义: 选择紧跟 E 元素后的 F 元素，用加号表示，选择<strong>相邻的第一个兄弟元素</strong><br>
语法： <code>E+F&#123;&#125;</code></p>
</li>
<li>
<p>通用兄弟选择器<br>
定义 ：选择 E 元素之后的<strong>所有兄弟元素</strong>F，作用于多个元素，用~隔开<br>
语法： <code>E~F&#123;&#125;</code></p>
</li>
</ol>
<h3 id="4、CSS-如何工作">4、CSS 如何工作</h3>
<p><img data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/622d94b4a8654015926c75a8e7e32a62~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<h3 id="5、CSS-常用属性">5、CSS 常用属性</h3>
<h4 id="5-1、color（颜色属性）">5.1、<strong>color</strong>（颜色属性）</h4>
<ul>
<li>
<p><code>rgb（0,0,0）</code> 和十六进制 <code>#000000</code> <em>（#00 红 00 绿 00 蓝）</em> GRB 以红绿蓝三原色直接组合；缺点：<strong>不直接关联所见颜色</strong> ；</p>
</li>
<li>
<p><code>hsl（0,0%,0%）</code> HSL 通过色相，饱和度和亮度组合； <strong>hue</strong>（色相），范围：0-360 ； <strong>saturation</strong>（饱和度），范围：0-100% ； <strong>lightness</strong>（亮度），范围：0-100%</p>
</li>
<li>
<p><code>#00000000</code> <strong>Aloha</strong> 为颜色透明度类似纯色滤镜，范围<strong>0-1</strong>从透明到不透明； 可添加在 grb 和 hsl 后变成<strong>rgba</strong> <strong>shla</strong> 而新版的浏览器可不写直接加第四位，可<strong>直接在后添加两位作为透明</strong></p>
</li>
<li>
<p><code>opacity</code> ： 透明度，从不透明到透明 0–&gt;1 (非 color 的属性值，为了分类先放着)</p>
</li>
</ul>
<h4 id="5-2、-fount（字体属性）">5.2、 <strong>fount</strong>（字体属性）</h4>
<ul>
<li>
<p><code>font-family</code>字体主题（可以有多个属性值，浏览器逐级选设备上有的字体），其中存在<code>sans-serif</code>（通用字体）属性 ，还可以通过下面代码规则来自定义字体主题，但是可能会影响原有字体</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>：&quot;字体名字&quot; <span class="attribute">src</span>：url（字体所在地址）</span><br><span class="line">    format（&quot;&quot;）&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>font-size</code>字体大小</p>
</li>
<li>
<p><code>font-style</code>字体样式 属性值为<code>italic</code>时为_斜体_</p>
</li>
<li>
<p><code>font-weight</code>字重 ;范围：100-900 ；其中 400 可以用 normal 替代，700 可以用 bold 替代 如果存在无法改变自重的情况时，可能是因为改字体仅有 normal 和 bold 两种属性</p>
</li>
<li>
<p><code> line-height</code>行高 ;推荐使用无单位的数字如 1.6 ，其表示为为自身字体大小的 1.6 倍，更明显直观 , 让行高等于高可以达到垂直居中的效果</p>
</li>
</ul>
<p>以上属性都可浓缩为 font 属性，简述时其他值为默认值 ，还有字符间距，首行缩进等</p>
<h4 id="5-3、background（背景属性）">5.3、<code>background</code>（背景属性）</h4>
<ul>
<li>
<p><code>background-color</code> 设置元素的背景图像</p>
</li>
<li>
<p><code>backcground-image: url(&quot;图片地址&quot;)</code> 设置背景图片</p>
</li>
<li>
<p><code>background-repeat</code> ：他有如下属性来设置背景图片</p>
<table>
<thead>
<tr>
<th>值</th>
<th>属性</th>
</tr>
</thead>
<tbody>
<tr>
<td>repeat</td>
<td>默认值</td>
</tr>
<tr>
<td>repeat-x</td>
<td>只向水平方向平铺</td>
</tr>
<tr>
<td>repeat-y</td>
<td>只向垂直方向平铺</td>
</tr>
<tr>
<td>no-repeat</td>
<td>不平铺</td>
</tr>
</tbody>
</table>
</li>
<li>
<p><code>background-size</code> 设置背景大小，他有如下值</p>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>length</td>
<td>设置背景图片的宽度和高度，第一个值宽度，第二个值高度,如果只是设置-个，第二个值 auto</td>
</tr>
<tr>
<td>percentage</td>
<td>计算相对位置区域的百分比，第一个值宽度，第二个值高度，如果只是设置-个，第二个值 auto</td>
</tr>
<tr>
<td>cover</td>
<td>保持图片纵横比并将图片缩放成完全覆盖背景区域的最小大小</td>
</tr>
<tr>
<td>contain</td>
<td>保持图片纵横比并将图像缩放成适合背景定位区域的最大大小</td>
</tr>
</tbody>
</table>
</li>
<li>
<p><code>background-position</code>该属性设置背景图像的起始位置，其默认值是: 0% 0%</p>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>left top</td>
<td>左上角.</td>
</tr>
<tr>
<td>left center</td>
<td>左中</td>
</tr>
<tr>
<td>left bottom</td>
<td>左下</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h4 id="5-4、文本属性">5.4、文本属性</h4>
<ul>
<li><code>text-align</code>: 设置文本位置
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>left</td>
<td>文本居左排列，默认值</td>
</tr>
<tr>
<td>right</td>
<td>把文本排列到右边</td>
</tr>
<tr>
<td>center</td>
<td>把文本排列到中间</td>
</tr>
</tbody>
</table>
</li>
<li><code>text-decoration</code> 规定添加到文本的修饰，下划线、上划线、 删除线等
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>underline</td>
<td>定义下划线</td>
</tr>
<tr>
<td>overline</td>
<td>定义上划线</td>
</tr>
<tr>
<td>line-through</td>
<td>定义删除线</td>
</tr>
</tbody>
</table>
</li>
<li><code>ext-indent</code>文本块中首行文本的缩进</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">text-<span class="selector-tag">i</span> ndent: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5-5、表格属性">5.5、表格属性</h4>
<ul>
<li>
<p>表格边框</p>
<p>指定 CSS 表格边框,使用 border 属性,不过都是双边框</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span>，<span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>折叠边框<br>
border-collapse 属性设置表格的边框是否被折叠成一个单一的边框或隔开</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123; <span class="attribute">border-collapse</span>:collapse; &#125;</span><br><span class="line"><span class="selector-tag">table</span>,<span class="selector-tag">td</span> &#123; <span class="attribute">border</span>: <span class="number">1px</span> solid black; &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>表格宽度和高度<br>
width 和 height 属性定义表格的宽度和高度</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123; wi dth:<span class="number">100%</span>; &#125;</span><br><span class="line"><span class="selector-tag">td</span> &#123; hei ght: <span class="number">50px</span>&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>表格文字对齐</li>
</ul>
<p>表格中的文本对齐和垂直对齐属性</p>
<p><code>text- align</code>属性设置水平对齐方式，向左，右,或中心</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>垂直对齐属性设置垂直对齐<br>
<code>vertical-align</code>属性设置垂直对齐方式，向上，下,或中心</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: bottom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>表格填充</li>
</ul>
<p>如果在表的内容中控制空格之间的边框，应使用 td 和 th 元素的填充属性</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>表格颜色<br>
下面的例子指定边框的颜色，和 th 元素的文本和背景颜色</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">tab1e,</span><br><span class="line"><span class="selector-tag">td</span>,</span><br><span class="line"><span class="selector-tag">th</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>深入 CSS</h1>
<h2 id="二、基础布局和盒模型">二、基础布局和盒模型</h2>
<h3 id="1-选择器特异度">1.选择器特异度</h3>
<p>在给 HTML 元素应用样式时，多个选择器指向同一个元素，会应用优先级高的选择器，而选择器优先级高低是通过权重计算得到的</p>
<p>权重由<strong>高到低</strong>如下（为了更直观行让内样式加入其中）：</p>
<p>权重向量： (0, 0, 0, 0)</p>
<p>行内样式 &gt; ID 选择器 &gt; class/属性/伪类选择器 &gt; 类型 / 伪元素</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;item1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item1&quot;</span>&gt;</span>项目1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item2&quot;</span>&gt;</span>项目1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item3&quot;</span>&gt;</span>项目1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="comment">/*权重向量计算示例*/</span></span></span><br><span class="line"><span class="css">  <span class="comment">/* (0, 1, 3, 1) */</span></span></span><br><span class="line"><span class="css">  <span class="selector-id">#container</span> <span class="selector-class">.menu</span><span class="selector-class">.menu</span> <span class="selector-tag">li</span><span class="selector-class">.item2</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: <span class="number">#ff4757</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="comment">/* (0, 1, 2, 1) */</span></span></span><br><span class="line"><span class="css">  <span class="selector-id">#container</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)<span class="selector-class">.item2</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: <span class="number">#7bed9f</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="comment">/* (0, 1, 1, 1) */</span></span></span><br><span class="line"><span class="css">  <span class="selector-id">#container</span> <span class="selector-tag">li</span><span class="selector-class">.item2</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: <span class="number">#ffa502</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="comment">/* (0, 0, 1, 1) */</span></span></span><br><span class="line"><span class="css">  <span class="selector-tag">li</span><span class="selector-class">.item2</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: <span class="number">#5352ed</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="comment">/* (0, 0, 1, 0) */</span></span></span><br><span class="line"><span class="css">  <span class="selector-class">.item2</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: <span class="number">#ff6b81</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>因为权重的不同，我们可以写一些基础样式在后面的开发中通过覆盖来达到相应效果来<strong>提高复用性</strong></p>
<h3 id="2-继承">2.继承</h3>
<p>谈到了选择器优先级问题就不得不提继承</p>
<p><strong>继承概念：</strong> 一般来说某些属性会自动继承其父元素的计算值，除非显式指定一个值；一般来说与文字，颜色等相关属性可以从父级继承的而盒模型相关的属性不可继承 <strong>注意：</strong> inherit 关键字允许显式的声明继承性，它对继承和非继承属性都生效；若父级没有某些相关属性值，则在继承中会使用<strong>初始值（initial）</strong> ，</p>
<h3 id="3-CSS-求值过程">3.CSS 求值过程</h3>
<p><img data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d66e709b6784a838c7d5919cbd2e05e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<h3 id="4-什么是布局">4.什么是布局</h3>
<p>布局可以确定内容的大小和位置和算法；</p>
<p>三种布局方式：</p>
<ul>
<li><strong>常规流：</strong> 顾名思义计算有一些规则，其中有<strong>块级，行级，表格布局，FlexBox，Grid 布局</strong></li>
<li><strong>浮动流：</strong> 一些元素可做成浮动，如图片的图文置换</li>
<li><strong>绝对定位：</strong> 可以直接任意改变元素位置但且不会对常规流造成影响</li>
</ul>
<h3 id="5-盒模型">5.<strong>盒模型</strong></h3>
<p>CSS<a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/The_box_model">盒子模型</a>就是在网页设计中经常用到的 CSS 技术所使用的一种思维模型。 盒子模型（Box Modle）可以用来对元素进行布局，包括<strong>外边距(margin)</strong> ， <strong>边框(border)</strong> ，<strong>内边距(padding)</strong> ，<strong>和实际内容(content)</strong><br>
这几个部分。</p>
<h3 id="6-content-box">6.content-box</h3>
<img data-src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/986e09e8979343b18aa9dd1bb51fb890~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="70%" />
<p>默认情况下，盒子的 <strong>宽度（width）</strong> 和 <strong>高度（height）</strong> 由 <strong>容量（content）</strong> 决定，如上图。其中<strong>宽度</strong> 为 content box 宽度，取值有长度、百分数、auto；百分数是相对于 conten box 的宽度，auto 是由浏览器根据其他属性确定，<strong>高度</strong> 类似，auto 是由内容高度计算得来，值得注意的是：只有当容器取固定值的时候，高度百分比才生效</p>
<p><strong>内边距（Padding）概念</strong></p>
<img data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fae58fa2be71453780ef0ee626e29e96~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="50%" />
<p><strong>页边距</strong>相当于容器宽度；对于<strong>固定值</strong>， 当其只有一个值时对应每个边； 当其有 2 个值时值对应上下+左右； 有 4 个值时是<strong>顺时针</strong>对应由 padding-top —&gt; padding-left ；对于<strong>百分数</strong>，其取值是相对于容器宽度</p>
<p><strong>边框（border）</strong> 一般有三种 <code>none</code>不显示、 <code>solid</code>实线、<code>dashed</code>虚线； 可以通过<code>border-方向-宽度/颜色</code> 来组合可以调节粗细颜色等</p>
<p>例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span> ： <span class="number">1px</span> solid <span class="selector-id">#ccc</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">border</span>—<span class="attribute">left</span> ：<span class="number">1</span> px solid <span class="selector-id">#ccc</span>;</span><br><span class="line"><span class="attribute">border</span>—<span class="attribute">right</span> ：<span class="number">2px</span> dotted red;</span><br><span class="line"></span><br><span class="line"><span class="attribute">border</span>—<span class="attribute">width</span> ： lpx <span class="number">2px</span> <span class="number">3px</span> <span class="number">4PX</span>&#x27;;</span><br><span class="line"><span class="attribute">border</span>—style ： solid;</span><br><span class="line"><span class="attribute">border</span>—<span class="attribute">color</span> ： green blue ;</span><br><span class="line"></span><br><span class="line"><span class="attribute">border</span>—<span class="attribute">left</span>—<span class="attribute">width</span> : <span class="number">3px</span>;</span><br><span class="line"><span class="attribute">border</span>—<span class="attribute">top</span>—<span class="attribute">color</span> :  <span class="number">#f00</span>;</span><br></pre></td></tr></table></figure>
<p><strong>外边距(margin)</strong> <code>margin-auto</code> 相同块级的 margin-left 和 margin-right 都为 auto 时 可实现水平居中 ; <code> margin collapse</code> 不同块级的 margin-top 和 margin-button 为相同值的时候，会使两个块级冲突；实际效果是在垂直方向上有折叠，会取两者中间的较大者，而不是简单加在一块。</p>
<h3 id="7-border-box">7.border-box</h3>
<img data-src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/843f3d1ab95d40e9a64507b40e29e1c1~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="70%" />
<p><strong>提示</strong> 不同的 box 可通过<code> box-sizing：border-box；</code>设置，两者区别在于宽和高取值不同<br>
<em>从两图中可以清楚的看到取值区别</em></p>
<p>对于<code>border-box</code>如果指定了宽和高，可能会导致内容的溢出，可以使用<code>overflow</code>去控制溢出内容，其有的属性值：<code>visible</code>展示、 <code>hidden</code>隐藏、 <code>scroll</code>滚动，等</p>
<h3 id="8-块级盒子（Block-box）-和-行级盒子（Inline-box）">8.块级盒子（Block box） 和 行级盒子（Inline box）</h3>
<p>在 CSS 中我们广泛地使用两种“盒子” —— <strong>块级</strong> <strong>盒子</strong> (<strong>block box</strong>) 和  <strong>行级盒子</strong> (<strong>inline box</strong>) <strong>。</strong> 这两种盒子会在<strong>页面流</strong>（page flow）和<strong>元素之间的关系</strong>方面表现出不同的行为</p>
<p><strong>哪那些是块级盒子那些是内联盒子呢？</strong><br>
除非特殊指定，诸如标题 (<code>&lt;h1&gt;</code>等) 和段落 (<code>&lt;p&gt;</code>) 默认情况下都是块级的盒子。</p>
<p>而比如  <code>&lt;a&gt;</code>  元素、 <code>&lt;span&gt;</code>、 <code>&lt;em&gt;</code>  以及  <code>&lt;strong&gt;</code>  和<code>&lt;cite&gt;</code> 、 <code>&lt;code&gt;</code>都是默认处于  <code>inline</code>  状态的。</p>
<p>我们通过对盒子<code>display</code>属性的设置，比如  <code>inline</code>  或者  <code>block</code> 、<code>inline-block</code>、<code>none</code>（忽略）来控制盒子的外部显示类型。</p>
<p><strong>区别：</strong> 块级盒子摆放、属性的适用性、和 HTML 的关系 --&gt; 元素生成盒子 等存在不同。</p>
<img data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c70aa6c71bb1488996f5d10a44a0f5fc~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="70%" />
<h2 id="三、常规流">三、常规流</h2>
<h3 id="1、行级排版上下文">1、行级排版上下文</h3>
<p>在只包含行级盒子的时候会创建行级<strong>IFC（lnline Formatting Context）</strong><br>
<strong>排版规则</strong></p>
<ul>
<li>盒子在一行内水平摆放</li>
<li>一行放不下时，换行显示</li>
<li>text-align 决定一行内盒子的水平对齐</li>
<li>vertical-align 决定一个盒子在行内的垂直对齐</li>
<li>避开浮动（float） 元素</li>
</ul>
<h3 id="2、块级排版上下文">2、块级排版上下文</h3>
<p>某些容器会创建一个<strong>BFC (Block Formatting Context)</strong><br>
比如：<br>
根元素 ，浮动、绝对定位、inline-block ，Flex 子项和 Grid 子项 ，overflow 值不是 visible 的块盒 ， display:flow-root；</p>
<p><strong>排版规则</strong></p>
<ul>
<li>盒子从到下摆放</li>
<li>垂直 margin 合并</li>
<li>BFC 内盒子的 margin 不会与外面的合并</li>
<li>BFC 不会和浮动元素重叠</li>
</ul>
<h3 id="3、Flex-Box">3、Flex Box</h3>
<p>Flex Box 被设计为一维布局模型，并作为一种可以在界面中的项目之间提供空间分布和强大对齐功能的方法，</p>
<p>可使用<code>display:flex</code>开启 flex 布局， 使用时 flex box 可以按行或按列排列，按<strong>行</strong>排列时分为水平方向的主轴和竖直方向的交叉轴，同理按<strong>列</strong>排列时与按行排列反之</p>
<ul>
<li>
<p><strong>主轴（main axis）</strong> 是沿着 flex 元素放置的方向延伸的轴（比如页面上的横向的行、纵向的列）。该轴的开始和结束被称为 <strong>main start</strong>  和 <strong>main end</strong>。</p>
</li>
<li>
<p><strong>交叉轴（cross axis）</strong> 是垂直于 flex 元素放置方向的轴。该轴的开始和结束被称为  <strong>cross start</strong>  和 <strong>cross end</strong>。</p>
</li>
</ul>
<p>改变主轴方向的布局可用<code>jastify-content: flex-start / flex-end / center / space-between / space-around / space-evenly /</code>如下图：</p>
<img data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0d990f9fe654bdbb7b98c5759961489~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="50%" />
<p>改变交叉轴方向的布局可用<code>align-items: flex-strat</code> / <code>flex-end</code> / <code>center </code>/<code>stretch</code> / <code>baseline</code>，相似的改变对应布局只是方向不同，如下图</p>
<img data-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/06737ed495bd4ba3a637da8fc1d5a3e6~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="50%" />
<p>也可改变主轴与交叉轴位置，<code>flex-direction: column</code> 即主轴变成了交叉轴，交叉轴变成了主轴，其他设置项不变。</p>
<p>非固定尺寸的子元素可以同过调整<code>Flex：</code>的属性调整空间的占比</p>
<img data-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d9275a56d6814e1ba2040b9f11f24e42~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="50%" />
<h3 id="4、Grid">4、Grid</h3>
<p>grid 是一个二维布局模型，通过划分格子（水平线+垂直线）来实现布局，可以同时控制行和列的部局方式</p>
<img data-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c411e043ee9432cb670d0264fccf884~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="30%" />
<img data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4c37f39318074068b1fbf09a705e4085~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="30%" />
<p>要开启 grid 布局只需要给外层容器设置<code>display：grid</code>即可；可以用 <code>grid-template-columns/rows：（行/列）</code> 指定宽度（fr 为 grid 布局专用单位）或者使用<code>gap</code>属性统一设置</p>
<img data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0fb28c267fcd47e488edbf1fdee95ede~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="50%" />
<p>也可以用<code>drid-template-area：</code>进行设置，比如要使一个页面如下：头部和底部宽度占全屏，侧边占 1/3，内容占 2/3</p>
<img data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2e5d5b453ac74311bf8ceb9213a909ee~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="50%" />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;layout&quot;&gt;</span><br><span class="line">    &lt;header&gt; 头 &#123;ß&lt;/header&gt;</span><br><span class="line">    &lt;aside&gt; 侧边栏 &lt;/aside&gt;</span><br><span class="line">    &lt;main&gt; 内容 &lt;/main&gt;</span><br><span class="line">    &lt;footer&gt; 底部 &lt;/footer&gt;</span><br><span class="line">&lt;/diV&gt;</span><br></pre></td></tr></table></figure>
<p>我们可以指定区域</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grid—template—areas ：</span><br><span class="line">    &quot;header header header&quot;</span><br><span class="line">    &quot;sidebar content content&quot;</span><br><span class="line">    &quot;footer footer footer&quot;</span><br><span class="line"></span><br><span class="line">header &#123; grid-area : header;</span><br><span class="line"> &#125;</span><br><span class="line">aside &#123;  grid-area : sideber;</span><br><span class="line"> &#125;</span><br><span class="line">main &#123;  grid-area : content;</span><br><span class="line"> &#125;</span><br><span class="line">footer &#123;</span><br><span class="line">grid—area ：footer;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>和 flex box 类似有水平方向的行轴有竖直方向的块轴可使用<code>align-items: center / end </code>等（格式同 flex），在对应的格子内实现对齐，</p>
<img data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c10e12daf1984908b533c52f83a71c41~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="70%" />
<p>如果行轨道和列轨道<strong>小于</strong>容器还可以使用<code>align-content: center /</code>等（格式同 flex），对轨道进行对齐</p>
<img data-src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d2245d1252ff42cb81639983d82617b5~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="70%" />
<h2 id="四、文档流">四、文档流</h2>
<p>文档流是文档中可显示对象在排列时所占用的位置/空间 ，例如:块元素自上而下摆放，内联元素，从左到右摆放</p>
<p>标准流里面的限制非常多，导致很多页面效果无法实现</p>
<ol>
<li>高矮不齐，底边对齐</li>
<li>空白折叠现象</li>
<li>无论多少个空格、换行、tab, 都会折叠为一个空格</li>
<li>如果我们想让 img 标签之间没有空隙，必须紧密连接</li>
</ol>
<p>怎么解决呢？</p>
<h2 id="五、浮动流（float）">五、浮动流（float）</h2>
<p>主要实现字图环绕，更多的用常规布局替代，可使用<code>float: left/right</code>开启，会脱离文档流，出现覆盖的情况；通俗点说就是浮动流都在新的一层，可以用来左对齐，或者右对齐</p>
<h2 id="六、绝对定位">六、绝对定位</h2>
<p><strong>position 属性</strong></p>
<ul>
<li>
<p><strong>static</strong> 默认值 ， 非定位元素，参与常规流的布局</p>
</li>
<li>
<p><strong>relative</strong>也会产生占用空间，相对自身原本位置偏移 ，不脱离文档流</p>
</li>
<li>
<p><strong>absolute</strong> 完全脱离，不占空间，绝对定位 ，相对非 static 祖先元素定位</p>
</li>
<li>
<p><strong>fixed</strong>相对于视囗绝对定位</p>
</li>
</ul>
<p><strong>温馨提示</strong></p>
<p>设置定位之后，相对定位和绝对定位他是相对于具有定位的父级元素进行位置调整，如果父级元素不存在定位，则继续向上逐级寻找，直到顶层文档</p>
<p>说人话就是：如果含有 position 属性的大盒子里面有一个也含有 position 属性的小盒子，那么小盒子会跟着大盒子一起移动</p>
<p>那么就引出了一个小知识：</p>
<p><strong><code>Z-index</code></strong></p>
<p>zindex 属性设置元素的堆叠顺序，属性值为 number（1、2、3…）。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面，那么谁上谁下就不一定了（doge）</p>
<h2 id="七、CSS3-新特性">七、CSS3 新特性</h2>
<h3 id="1、圆角效果">1、圆角效果</h3>
<p>使用<code>border-radius</code>属性即可，属性值可以调节圆角度数</p>
<ul>
<li>四个值:第一个值为左上角，第二个值为右上角,第三个值为右下角，第四个值为左下角（<strong>左上------&gt;左下，顺时针</strong>）</li>
<li>三个值:第一个值为左上角,第二个值为右上角和左下角,第三个值为右下角（<strong>不建议使用</strong>）</li>
<li>两个值:第一个值为左上角与右下角，第二个值为右上角与左下角（<strong>对角</strong>）</li>
<li>一个值:四个圆角值相同</li>
</ul>
<h3 id="2、阴影">2、阴影</h3>
<p><code>box-shadow</code>向框添加一个或多个阴影。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: h-shadow v-shadow b1ur color;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>h-shadow</td>
<td>必选，水平阴影的位置</td>
</tr>
<tr>
<td>v-shadow</td>
<td>必选，垂直阴影的位置</td>
</tr>
<tr>
<td>blur</td>
<td>可选，模糊距离</td>
</tr>
<tr>
<td>color</td>
<td>可选，阴影的颜色</td>
</tr>
</tbody>
</table>
<h3 id="3、-keyframes创建动画">3、<code>@keyframes</code>创建动画</h3>
<p>动画是使元素从一种样式逐渐变化为另一种样式的效果</p>
<p>可以改变任意多的样式任意多的次数，用百分比来规定变化发生的时间，或用关键词&quot;from&quot;和&quot;to&quot;，等同于 0%（开始）和 100%（完成）</p>
<p>使用<code>@keyframes</code>规则,你可以创建动画</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> name &#123;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">from</span> |<span class="number">0%</span>&#123;</span><br><span class="line">  css样式</span><br><span class="line">&#125;</span><br><span class="line">percent&#123;</span><br><span class="line">  css样式</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">to</span>|<span class="number">100%</span>&#123;</span><br><span class="line">  css样式</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>name</code>:动画名称,开发人员自己命名;</p>
<p><code>percent</code>:为百分比值,可以添加多个百分比值;</p>
<h3 id="4、animation执行动画">4、<code>animation</code>执行动画</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">animation</span>: name duration timi ng-function delay iteration-count di recti on;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>设置动画的名称</td>
</tr>
<tr>
<td>duration</td>
<td>设置动画的持续时间</td>
</tr>
<tr>
<td>timing-function</td>
<td>设置动画效果的速率</td>
</tr>
<tr>
<td>delay</td>
<td>设置动画的开始时间(延时执行)</td>
</tr>
<tr>
<td>iteration-count</td>
<td>设置动画循环的次数，infinite 为无限次数的循环</td>
</tr>
<tr>
<td>direction</td>
<td>设置动画播放的方向： normal（正向） 和 alternate（反向）</td>
</tr>
<tr>
<td>animation-play-state</td>
<td>控制动画的播放状态: running 代表播放， 而 paused 代表停 止播放</td>
</tr>
</tbody>
</table>
<p>timing-function 的值为：</p>
<ul>
<li>ease 逐渐变慢(默认)</li>
<li>linear 匀速</li>
<li>ease-in 加速</li>
<li>ease-out 减速</li>
<li>ease-in-out 先加速后减速</li>
</ul>
<p>例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;animation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.animation</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">background</span>-coor: red;</span><br><span class="line">	<span class="attribute">animation</span>: anima <span class="number">5s</span> linear <span class="number">5s</span> infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.animation</span>: hover &#123;</span><br><span class="line">	animation-play- state: paused;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> anima &#123;</span><br><span class="line"><span class="number">0%</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">50%</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">100%</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: b1ueviolet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5、媒体查询">5、媒体查询</h3>
<ul>
<li>媒体查询能使页面在不同在终端设备下达到不同的效果</li>
<li>媒体查询会根据设备的大小自动识别加载不同的样式</li>
</ul>
<ol>
<li>设置 meta 标签</li>
</ol>
<p>使用设备的宽度作为视图宽度并<strong>禁止初始的缩放</strong>。在<code>&lt;head&gt;</code>标签里加入这个 meta 标签。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot;</span><br><span class="line">      <span class="attribute">content</span>=&quot;<span class="attribute">width</span>=device-<span class="attribute">width</span>， <span class="attribute">initial</span>-scale=<span class="number">1</span>, maxi mum-</span><br><span class="line">scale=<span class="number">1</span>，user-scalab1e=no&quot;&gt;</span><br></pre></td></tr></table></figure>
<img data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/19265bcddad147bc8a8dd41fb7e6e3d0~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="100%" />
<ol start="2">
<li>语法<br>
<code>max-width</code>最大宽度 <code>min-width</code>最小宽度</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 可视为手机端 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: aqua;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 可视为iPad端*/</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) <span class="keyword">and</span> (max <span class="attribute">-width</span>: <span class="number">996px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: chartreuse;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*可视为电脑端*/</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">996px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上只是控制背景颜色，还可以更改标签是否显示等</p>
<h3 id="6、-雪碧图">6、 雪碧图</h3>
<p>CSS Sprite 也叫 CSS 精灵图、CSS 雪碧图，是一种网页图片应用处理方式。它允许你将一个页面涉及到的所有零星图片都包含到一张大图中去</p>
<p>最常见于表情，比如：</p>
<p><img data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/82dd521c29de4668ab6bfa34c85bb67d~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<p><strong>优点</strong></p>
<ul>
<li>减少图片的字节</li>
<li>减少网页的 http 请求,从而大大的提高页面的性能</li>
</ul>
<p><strong>原理</strong></p>
<ul>
<li>通过 background-image 引入背景图片</li>
<li>通过 background-position 把背景图片移动到自己需要的位置</li>
</ul>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.icon1</span> &#123;</span><br><span class="line">   // 改变 <span class="selector-tag">i</span> 标签为块级元素</span><br><span class="line">    <span class="attribute">display</span>: b1ock;</span><br><span class="line">    //引入有很多标签的大图片</span><br><span class="line">    <span class="attribute">background</span>- image: <span class="built_in">ur1</span>(<span class="number">1</span>. png);</span><br><span class="line">    //调整大图片的位置，直到得到完整的所需表情</span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">    // <span class="selector-tag">i</span> 组件的宽高</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">70px</span>;</span><br><span class="line"><span class="selector-class">.icon2</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: b1ock;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">ur1</span>(<span class="number">1</span>. png);</span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">93px</span> -<span class="number">84px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">70px</span>;</span><br></pre></td></tr></table></figure>
<h3 id="7、字体图标">7、字体图标</h3>
<p>我们会经常用到一些图标。但是我们在使用这些图标时，往往会遇到失真的情况,而且图片数量很多的话，页面加载就越慢。所以,我们可以使用字体图标的方式来显示图标，既解决了失真的问题，也解决了图片占用资源的问题</p>
<p><strong>优点</strong></p>
<ul>
<li>轻量性:加载速度快,减少 http 请求</li>
<li>灵活性:可以利用 CSS 设置大小颜色等</li>
<li>兼容性:网页字体支持所有现代浏览器，包括 IE 低版本</li>
</ul>
<p>使用字体图标</p>
<ol>
<li>进入<a href="https://www.iconfont.cn/">阿里巴巴矢量图标库</a>注册账号并登录</li>
<li>选取图标或搜索图标</li>
<li>添加购物车</li>
<li>下载代码</li>
<li>添加到项目里</li>
<li>选择 font-class 引用</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./font/iconfont.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>7.挑选相应图标并获取类名，应用于页面:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-xxx(地址) xxx(使用时大小默认) &quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1>总结</h1>
<p>CSS 目前已经大致更新完善了，但是还是会更新以后遇到的新知识，也有在 b 站学习知识，感谢您的阅读和赞赏~!</p>
<p><strong>本文如有错误欢迎纠正指正! <a href="https://link.juejin.cn/?target=https%3A%2F%2Fp3-juejin.byteimg.com%2Ftos-cn-i-k3u1fbpfcp%2Fe0069c4ff46a449ba432e2d1a89438fb~tplv-k3u1fbpfcp-zoom-1.image" title="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e0069c4ff46a449ba432e2d1a89438fb~tplv-k3u1fbpfcp-zoom-1.image">😊</a></strong></p>
<h3 id="补充：">补充：</h3>
<p>选择器——<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors">知识充电</a></p>
<p>CSS 属性——<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/attr">知识充电</a></p>
<p>CSS 如何工作——<a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/How_CSS_works">知识充电</a></p>
<p>CSS 文档——<a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS">知识充电</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>和HTML相识的那一次</title>
    <url>/2769488d/</url>
    <content><![CDATA[<h1>前言</h1>
<ol>
<li>作为学习笔记，可能存在一些错误，若发现望指正，万分感激</li>
<li>文档编写时间已经比较久，可能存在过时信息</li>
<li>意写成类似 HTML 参考文档的形式，方便以后复习查阅~</li>
</ol>
<h2 id="快速入门标签">快速入门标签</h2>
<h3 id=""><!--...--></h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--这是一段注释。注释不会在浏览器中显示。--&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以使用 <strong>Ctrl+/</strong> 快捷键来快速注释代码</p>
<h3 id="DOCTYPE"><code>&lt;!DOCTYPE&gt;</code></h3>
<p><code>&lt;!DOCTYPE&gt;</code> 声明必须是 HTML 文档的第一行，位于<code>&lt;html&gt;</code>标签之前。标记当前 HTML 文件是什么样的 HTML 版本，浏览器根据此决定页面的渲染</p>
<h3 id="html"><code>&lt;html&gt;</code></h3>
<p>根标签,<code>&lt;html&gt;</code> 与 <code>&lt;/html&gt;</code> 标签限定了文档的开始点和结束点，在它们之间是文档的头部和主体。</p>
<h3 id="head"><code>&lt;head&gt;</code></h3>
<p><code>&lt;head&gt;</code> 标签用于定义文档的头部，它是所有头部元素的容；下面这些标签可用在 head 部分：<code>&lt;base&gt;</code>, <code>&lt;link&gt;</code>, <code>&lt;meta&gt;</code>, <code>&lt;script&gt;</code>, <code>&lt;style&gt;</code>, <code>&lt;title&gt;</code>。 <code>&lt;title&gt;</code> 定义文档的标题，它是 head 部分中唯一必需的元素。</p>
<h3 id="body"><code>&lt;body&gt;</code></h3>
<p>body 元素包含文档的所有内容（比如文本、超链接、图像、表格和列表等等。）</p>
<h3 id="h1-h6-（块级）"><code>&lt;h1&gt; - &lt;h6&gt;</code>（块级）</h3>
<p>为标题字体大小，<code>&lt;h1&gt;</code> 定义最大的标题。<code>&lt;h6&gt;</code> 定义最小的标题。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>A<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>A<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>A<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>A<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>A<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>A<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果如下：\ <img data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0597fdd1681248a7a767eabf80998ad8~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="15"/></p>
<h3 id="p-（块级）"><code>&lt;p&gt;</code> （块级）</h3>
<p>定义段落 ; p 元素会自动在其前后创建一些空白。浏览器会自动添加这些空间，您也可以在样式表中规定。</p>
<h3 id="hr-（块级）"><code>&lt;hr/&gt;</code>（块级）</h3>
<p>横线单标签，有以下属性：</p>
<ol>
<li>color:设置水平线的颜色</li>
<li>width:设置水平线的宽度</li>
<li>size:设置水平线的高度</li>
<li>align:设置水平线的对齐方式(默认居中)，可取值<code>left</code>|<code>right</code></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span> <span class="attr">width</span>=<span class="string">&quot;20%&quot;</span> <span class="attr">size</span>=<span class="string">&quot;2px&quot;</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果入下：</p>
<p><img data-src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/32da5839ed184017baf58df5938c3a7f~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<p>当然后面建议使用 css 写样式</p>
<h3 id="br"><code>&lt;br/&gt;</code></h3>
<p>换行单标签，可以插入文章描述里实现换行</p>
<h3 id="img-（行内块级）"><code>&lt;img&gt;</code>（行内块级）</h3>
<p>图片组件，有以下属性：</p>
<ol>
<li>src: 路径(图片地址与名字)</li>
<li>alt：alt 为图片未被加载的替代性文本</li>
<li>width: 规定图像的宽度</li>
<li>height:规定图像的高度</li>
<li>title:鼠标悬停在图片上给予提示</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/image/0.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片暂未加载&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">title</span>=<span class="string">&quot;我是提示&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="a-（内联）"><code>&lt;a&gt;</code>（内联）</h3>
<p>超链接标签，需要添加<code>href</code>属性来实现跳转功能，可以在标签里添加文本，图片等也能实现跳转</p>
<ol>
<li><code>href </code>属性来描述链接的地址</li>
<li>默认情况下个未访问过的链接显示为蓝色字体并带有下划线。</li>
<li>我们可以通过 css 来修改默认情况下的样式，并且还可以修改访问前，访问后，鼠标悬停在链接上时等样式</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://w.wallhaven.cc/full/k7/wallhaven-k7o551.jpg&quot;</span>&gt;</span>我是文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://w.wallhaven.cc/full/k7/wallhaven-k7o551.jpg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/image/1.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100px&quot;</span> <span class="attr">title</span>=<span class="string">&quot;我是提示&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img data-src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/382710e8bbb145ac8f5d1bf82d46506b~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="70%" />
<h2 id="块元素和内联元素">块元素和内联元素</h2>
<p>虽然到了 HTML5 的版本，元素分类更细致了,但是这对初学者并不友好,所以我们仍然按照块元素和内联元素做区分，这对我们的布局起到了至关重要的作用</p>
<p><img data-src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68ed28d420ba4ead90fffec726d686f6~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"><br>
行内块级元素(特点:不换行、能够识别宽高)<br>
1、和其他元素都在一行上；<br>
2、元素的高度、宽度、行高以及顶和底边距都可设置</p>
<ul>
<li>
<p>常见块级元素<br>
<code>&lt;hr&gt;、&lt;div&gt;、&lt;p&gt;、&lt;h1&gt;...&lt;h6&gt;、&lt;ol&gt;、&lt;ul&gt;、&lt;dl&gt;、&lt;table&gt;、&lt;address&gt;、&lt;blockquote&gt; 、&lt;form&gt;</code>…</p>
</li>
<li>
<p>常见内联元素<code>&lt;b&gt;、&lt;a&gt;、&lt;span&gt;、&lt;i&gt;、&lt;em&gt;、&lt;strong&gt;、&lt;label&gt;、&lt;q&gt;、&lt;var&gt;、&lt;cite&gt;、&lt;code&gt;</code>…</p>
</li>
<li>
<p>行内块级元素<br>
<code>&lt;button&gt;、&lt;img&gt;、 &lt;input&gt;</code>…</p>
</li>
</ul>
<h2 id="格式化">格式化</h2>
<h3 id="文本格式">文本格式</h3>
<p><strong>都是内联元素</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--着重--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--粗体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--斜体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--加重--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--删除字--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--无特殊含义--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img data-src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d8c61f92d1b4c84a0619c73921fa506~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<h3 id="引用标签">引用标签</h3>
<p><code>&lt;blockquote&gt;</code>标记长的引用 <code>&lt;q&gt;</code>用来定义短的引用 <code>&lt;code&gt;</code>定义计算机代码文本</p>
<p>属性：</p>
<ul>
<li><code>cite</code>属性用来规定引用的来源</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q</span> <span class="attr">cite</span>=<span class="string">&quot;URL&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">q</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="列表">列表</h2>
<h3 id="定义列表">定义列表</h3>
<p><code>&lt;dl&gt;</code> 、<code>&lt;dt&gt;</code> 、<code>&lt;dd&gt;</code> 都是块级元素</p>
<p>一般在展示的列表形式包括标题和描述两部分时，使用定义列表<br>
<code>&lt;dl&gt;&lt;/dl&gt;</code>：定义列表；<br>
<code>&lt;dt&gt;&lt;/dt&gt;</code>:标题；<br>
<code>&lt;dd&gt;&lt;/dd&gt;</code>:分支描述（多对多）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果如下：\ <img data-src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8c06c1973294446e82c3eb68ec4ee077~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="60"/></p>
<h3 id="有序列表">有序列表</h3>
<p><code>&lt;ol&gt;</code> 和 <code>&lt;li&gt;</code>标签都是块级元素</p>
<p>有序列表是一列项目，列表项目使用数字进行标记。有序列表始于<code>&lt;ol&gt;</code>标签。每个列表项始于<code>&lt;i&gt; </code>标签。 可嵌套</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>b<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>c<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果如下：\ <img data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0d8720b704c44c4b44cfe54c451400b~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="80"/></p>
<p><strong><code>&lt;b1&gt;</code>的属性<code>type</code></strong> 拥有的选项</p>
<ul>
<li><code>1</code>表示列表项目用数字标号(1.23…</li>
<li><code>a</code>表示列表项目用小写字母标号(a,b,c、…)</li>
<li><code>A</code>表示列表项目用大写字母标号(A,B,C、…)</li>
<li><code>i</code>表示列表项目用小写罗马数字标号(i、ii、iii、…)</li>
<li><code>|</code>表示列表项目用大写罗马数字标号(I、II、III、…）</li>
</ul>
<p><strong><code>&lt;ol&gt;</code>的快捷键：</strong> <code>ul&gt;li*n</code>(n 是要生成 li 标签的数量)，同理可以以相同类似推广组合比如：<code>ul&gt;li*3&gt;a</code></p>
<h3 id="无序列表">无序列表</h3>
<p><code>&lt;ul&gt;</code> 和 <code>&lt;li&gt;</code>标签都是块级元素</p>
<p>无序列表是一个项目的列表，此列项目使用粗体圆点(典型的小黑圆圈)进行标记，无序列表始于<code>&lt;ul&gt;</code>标签；每个列表项始于<code>&lt;li&gt;</code>标签。 可嵌套； 常用于列表导航、无序的列表效果…</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>b<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>c<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果如下：\ <img data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/944393b5412f4c56afc2db3e3f95aebd~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="80" /></p>
<p><strong><code>&lt;ul&gt;</code>的<code>type</code>的属性</strong>type 拥有的选项</p>
<ul>
<li><code>disc</code> 默认实心圆</li>
<li><code>circle</code> 空心圆</li>
<li><code>square</code> 小方块</li>
<li><code>none</code> 不显示</li>
</ul>
<p><strong><code>&lt;ul&gt;</code>的快捷键：</strong> <code>ul&gt;li*n</code>(n 是要生成 li 标签的数量)</p>
<h3 id="列表下拉选择">列表下拉选择</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>a<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>b<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>c<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<img data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc190b94e44343f88ac02b5e51c62855~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="50" />
<h3 id="表格">表格</h3>
<p><code>&lt;table&gt;</code>、<code>&lt;tr&gt;</code>和<code>&lt;td&gt;</code>都是块级元素</p>
<p>表格由：行、列、单元格组成；表格标签有</p>
<ul>
<li>表格:<code>&lt;table&gt;</code></li>
<li>行:<code>&lt;tr&gt;</code></li>
<li>单元格(列):<code>&lt;td&gt;</code></li>
</ul>
<p><strong>表格属性</strong></p>
<ul>
<li>border: 设置表格的边框</li>
<li>width: 设置表格的宽度</li>
<li>height: 设置表格的高度</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b09b62234584fc39f86a085347736ba~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<p>快捷键：<code>table&gt;tr*n&gt;td*m&#123;单元格的文本信息&#125;</code>（n：行数量，m：列数量）</p>
<h3 id="单元格合并">单元格合并</h3>
<ul>
<li><strong>水平合并（colpan）</strong> : 保留左边，删除右边</li>
<li><strong>垂直合并（rowspan）</strong>: 保留上边，删除下边</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;td&gt;4&lt;/td&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;td&gt;8&lt;/td&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;td&gt;9&lt;/td&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可见 <code>colspan</code> 和 <code>rowspan</code> 的值对应的是合并单元格的数量，并且要删除对应单元格 ，如果不删除，则会直接生成对应大小的单元格 ，会把部分单元格&quot;顶&quot;出去</p>
<img data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa296cc9844c45a790dfea529a28de53~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="100%" />
<p>那问题来了，如果要合并井字（比如：合并 2 3 5 6）单元格怎么办？</p>
<h2 id="表单">表单</h2>
<h3 id="Form-表单-块级">Form 表单(块级)</h3>
<p>表单是由容器和控件组成的，一个表单一般应该包含用户填写信息的输入框,提交按钮等,这些输入框,按钮叫做控件，表单就是容器，它能够容纳各种各样的控件</p>
<p><strong>属性说明</strong></p>
<ul>
<li>action 服务器地址</li>
<li>name 表单名称</li>
<li>method 中 Get 和 Post 的区别(目前了解即可)：
<ul>
<li>数据提交方式，get 把提交的数据 url 可以看到，post 看不到</li>
<li>get- 般用于提交少量数据，post 用来提交大量数据</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;myFrom&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get/post&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>表单元素</strong><br>
<code>input</code>为行内块级元素</p>
<p>完整的表单包含三个基本组成部分:表单标签、表单域、表单按钮</p>
<ul>
<li>表单标签:输入框，按钮等</li>
<li>表单域：输入范围</li>
<li>表单按钮：submit</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;myFrom&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get/post&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--表单控件--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fabfca6d61bb4aedab038d405d5867dd~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<h3 id="表单元素">表单元素</h3>
<ul>
<li>文本框</li>
</ul>
<p>文本域通过<code>&lt;input tye=&quot;text&quot;&gt;</code>标签来设定，当用户要在表单中键入字母、数字等内容时，就会用到文本域</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img data-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7181d1d830444e4d94f41e251eb84d8f~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<ul>
<li>密码框</li>
</ul>
<p>密码字段通过标签<code>&lt;input type=&quot;password&quot;&gt;</code>来定义</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span>Password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot; pwd&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bfd53407287f466fb2f056b9cdaeda98~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<ul>
<li>提交按钮</li>
</ul>
<p>输入完信息点击提交，会将信息提交给另一个页面或者服务器，再做相关处理</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span> Password:</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot; pwd&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img data-src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c5faa1d92c5c45f9b86040fa052f68bc~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<h2 id="更多">更多</h2>
<h3 id="audio"><code>&lt;audio&gt;</code></h3>
<p>音频组件，control 表示是否默认播放控件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="video"><code>&lt;video&gt;</code></h3>
<p>视频组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="input"><code>&lt;input&gt;</code></h3>
<p>输入框，</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">placehoder</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span> ` /&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>placehoder 为未输入时的占位符</li>
<li>type 有多种属性值可以调节输入范围</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">max</span>=<span class="string">&quot;10&quot;</span> <span class="attr">min</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">max</span>=<span class="string">&quot;10&quot;</span> <span class="attr">min</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果如下：\ <img data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ba8003459d049a18c61c4fcb8aca6df~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="50%" /></p>
<p><strong>单选框和复选框</strong></p>
<p>chekbox 为复选，radio 为单选互斥关系由 name 相同达到的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>复选：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>a</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>&gt;</span>b</span><br></pre></td></tr></table></figure>
<p>效果如下：\ <img data-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f338fb00c4694278b645afe5611991ae~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="" /></p>
<p>单选：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;c&quot;</span>&gt;</span>a</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;c&quot;</span>&gt;</span>b</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<img data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/00fd8023b9b54f598942f20c7de0dbda~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="" />
<p><strong>提示输入</strong></p>
<p>多个标签<strong>提示</strong>输入,list 来指定用户可以有的提示选项</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ipute</span> <span class="attr">list</span>=<span class="string">&quot;&quot;</span>&gt;</span>和<span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span><span class="tag">&lt;/<span class="name">ipute</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">lest</span>=<span class="string">&quot;countries&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;countries&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>green<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Yellow<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Blue<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<img data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/41da2e86348c4f8f93845161f22ad463~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="30%" />
<h3 id="textarea"><code>&lt;textarea&gt;</code></h3>
<p><code>&lt;textarea&gt;&lt;/textarea&gt;</code>:文本域，可多行输入</p>
<h2 id="页面内容划分">页面内容划分</h2>
<p>页面内容一般分为 4 部分：<code>header</code>，<code>main</code>，<code>aside</code>，<code>footer</code>，</p>
<ul>
<li><code>header</code>中常常含有 log，nav（导航标签）等</li>
<li><code>main</code>中则是 article 文章部分，main 只有一个为文章主体部分</li>
<li><code>aside</code>表示与内容相关但不属于文章内容，常常放置广告等，</li>
<li><code>footer</code>位于页未一般放参考链接，版权信息等</li>
</ul>
<p>刚开始是使用<code>div</code>容器元素，让代码模块化，来实现页面内容划分，但是我们发现效率并不是很高</p>
<img data-src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f72e81af18324bae8d191e27194b994f~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="100%" />
<p>所以在 HTML5 直接推出了新标签来划分页面内容</p>
<img data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a63c94671c2046b3b1de063ff978d327~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="100%" />
<p>两者对比</p>
<img data-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/53af1d2b31674b2daff8029b13eb59c7~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="100%" />
很明显新标签更容易理解，搜索引擎也会有有相应优化，所以推荐使用新标签来划分页面内容
<h2 id="语义化的理解">语义化的理解</h2>
<p>随着时间的推移，为了可以更清晰的表述出需要的结构和内容，标签会进行迭代更新，会存在新的标签的产生，而 HTML 所有的元素，属性，属性值，都有一些特定的含义，我们应该遵循语义来进行开发</p>
<p>比如在如下应用场景：</p>
<ul>
<li>
<p>开发者-修改、维护页面-------&gt;代码可读性,可维护性</p>
</li>
<li>
<p>浏览器-展示页面,搜索引擎-提取关键词、排序----------&gt;搜索引擎优化</p>
</li>
<li>
<p>屏幕阅读器－给盲人读页面内容------&gt;提升无障碍性</p>
</li>
</ul>
<h1>总结</h1>
<p>说了那么多来做个小小的总结：这是一篇小白的笔记，内容不多也不深，我觉得我奶奶来了都能看懂，就提了一些 HTML 的标签以及简单食用方法，加上一点语义化的理解。立意<strong>重在建立学习框架</strong>，对于做好语义化可以在<a harf="https://developer.mozilla.org/zh-CN/" target="_blank">MDN</a>里面学习更多更深的 HTML 知识，规范书写代码，不使用可视化工具生成代码。</p>
<p><strong>本文如有错误欢迎纠正指正! <a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e0069c4ff46a449ba432e2d1a89438fb~tplv-k3u1fbpfcp-zoom-1.image">😊</a></strong></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>初识JavaScript</title>
    <url>/14ff2902/</url>
    <content><![CDATA[<h1>前言</h1>
<ol>
<li>作为学习笔记，可能存在一些错误，若发现望指正，万分感激</li>
<li>文档编写时间已经比较久，可能存在过时信息</li>
<li>自己学习学习的 JavaScript 基础，并记录成笔记！</li>
</ol>
<h2 id="如何引入-JavaScirpt">如何引入 JavaScirpt</h2>
<p>JavaScript 代码可以直接嵌在网页的任何地方</p>
<p><strong>内部引入</strong>：是由<code>&lt;script&gt;...&lt;/script&gt;</code>包含的代码就是 JavaScript 代码，它将直接被浏览器执行。</p>
<p><strong>外部引入</strong>：是把 JavaScript 代码放到一个单独的<code>.js</code>文件，然后在 HTML 中通过<code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code>引入这个文件。</p>
<p><strong>代码示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//内部引入</span></span><br><span class="line">&lt; script &gt;&lt; /script&gt;</span><br><span class="line"><span class="comment">// 外部引入</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/static/js/abc.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p><strong>建议：</strong> 把 js 放在 html 代码结束处，这样可以让页面先渲染再跑 js，可以避免页面卡住</p>
<p>很多语法和 Java 差不多，比如循环等</p>
<h1>一、基本语法</h1>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义变量</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> num1 = <span class="number">10</span> ;</span><br><span class="line"><span class="string">&#x27;Hello, world&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>; <span class="keyword">var</span> y = <span class="number">2</span>; <span class="comment">// 不建议一行写多个语句!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//循环</span></span><br><span class="line"><span class="keyword">if</span>()&#123;&#125;</span><br><span class="line"><span class="keyword">for</span>()&#123;&#125;</span><br><span class="line"><span class="keyword">while</span>()&#123;&#125;</span><br><span class="line"><span class="keyword">do</span>&#123;&#125;<span class="keyword">while</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//常用输出语句</span></span><br><span class="line">alert（）;</span><br><span class="line"><span class="built_in">console</span>.log（）;</span><br></pre></td></tr></table></figure>
<h2 id="1、Number">1、Number</h2>
<p>JavaScript 不区分整数和浮点数，统一用 Number 表示；可以直接做四则运算，规则和数学一致</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">123</span>; <span class="comment">// 整数123</span></span><br><span class="line"></span><br><span class="line"><span class="number">0.456</span>; <span class="comment">// 浮点数0.456</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.2345e3</span>; <span class="comment">// 科学计数法表示1.2345x1000，等同于1234.5</span></span><br><span class="line"></span><br><span class="line">-<span class="number">99</span>; <span class="comment">// 负数</span></span><br><span class="line"></span><br><span class="line"><span class="literal">NaN</span>; <span class="comment">// NaN表示Not a Number，当无法计算结果时用NaN表示</span></span><br><span class="line"></span><br><span class="line"><span class="literal">Infinity</span>; <span class="comment">/*Infinity表示无限大，</span></span><br><span class="line"><span class="comment">当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity*/</span></span><br></pre></td></tr></table></figure>
<h2 id="2、字符串">2、字符串</h2>
<h3 id="2-1、转义字符">2.1、转义字符</h3>
<p>JavaScript 的字符串就是用 <strong><code>''</code></strong> 或 <strong><code>&quot;&quot;</code></strong> 括起来的字符表示。<br>
如果字符串内部既包含 <strong><code>'</code></strong> 又包含 <strong><code>&quot;</code></strong> 怎么办？</p>
<p>比如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;I&#x27;</span>m <span class="string">&quot;OK&quot;</span>!<span class="string">&#x27;;</span></span><br></pre></td></tr></table></figure>
<p>可以使用 <strong><a href="https://zhuanlan.zhihu.com/p/297998732">转义字符</a></strong></p>
<p><strong>转义字符</strong>可以转义很多字符，</p>
<ul>
<li><code>\n</code>表示换行</li>
<li><code>\'</code>表示<code>'</code></li>
<li><code>\t</code>表示制表符</li>
<li><code>\\</code>表示的字符就是 <code>\</code></li>
<li>ASCII 字符可以以<code>\x##</code>形式的十六进制表示</li>
<li><code>\u####</code>表示一个 Unicode 字符</li>
</ul>
<h3 id="2-2、多行字符串">2.2、多行字符串</h3>
<p>js 里可以使用单引号表示多行字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单引号在Tab按键的上方</span></span><br><span class="line"><span class="string">`这是一个</span></span><br><span class="line"><span class="string">多行</span></span><br><span class="line"><span class="string">字符串`</span>;</span><br></pre></td></tr></table></figure>
<h3 id="2-3、模板字符串">2.3、模板字符串</h3>
<p>JS 里可以使用<code>$&#123;&#125;</code>快速拼接字符串与变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置变量age</span></span><br><span class="line"><span class="comment">//在Java中：</span></span><br><span class="line"><span class="string">&quot;小明&quot;</span> +</span><br><span class="line">  age +</span><br><span class="line">  <span class="string">&quot;岁了&quot;</span> <span class="comment">// 在JS中也可以这样写，但还可以实现多行字符串编写和模板字符串</span></span><br><span class="line">  <span class="string">`小明<span class="subst">$&#123;age&#125;</span>岁了`</span>;</span><br></pre></td></tr></table></figure>
<h3 id="2-4、字符串长度">2.4、字符串长度</h3>
<p>用 <strong><code>.length</code></strong> 来获取字符串长度</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line">s.length; <span class="comment">// 13</span></span><br></pre></td></tr></table></figure>
<p>那我们怎么看字符串长度呢？</p>
<ol>
<li><strong>不带转义字符的字符</strong><br>
如：<code>abc ,!x=/</code> ，其长度为  9 (注意有空格)</li>
<li><strong>带转义字符的字符</strong><br>
如： <code>abc !,\n</code> ，其中的<code>\n</code>为转义字符（换行符），计算字符串长度时只能计作一个字符，所以该字符串的长度为 7</li>
<li><strong>特殊转义符的字符串</strong><br>
如：<code>abcd\0ef</code> ，其中转义字符 <code>\0</code> 是字符串结束符，所以在计算长度时为 4</li>
<li><strong>反斜杠</strong><br>
如： <code>abc !,\\n</code> ， 因为反斜杠不能作为任何合法的字符，所以是转义符<code>\\</code>加上 n 长度为 8</li>
</ol>
<h3 id="2-5、-不可变性">2.5、 不可变性</h3>
<p>字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果</p>
<h2 id="3、布尔值">3、布尔值</h2>
<p>一个布尔值只有<code>true</code>、<code>false</code>两种值 ； <code>||</code>运算是或运算 ； <code>!</code>运算是非运算 ；<br>
<code>&amp;&amp;</code>运算是与运算</p>
<h2 id="4、比较运算符">4、比较运算符</h2>
<p>在 JS 里 <strong>不要</strong> 使用<code>==</code>比较 ，使用<code>===</code>比较</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">=  <span class="comment">//赋值</span></span><br><span class="line">== <span class="comment">//类型不一样，值一样，也就是比较类型</span></span><br><span class="line">=== <span class="comment">// 和Java的 == 一样</span></span><br></pre></td></tr></table></figure>
<p><code>NaN</code>这个特殊的 Number 与所有其他值都不相等 ， 包括它自己;<br>
唯一能判断<code>NaN</code>的方法是通过<code>isNaN()</code>判断是否为<code>true </code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span>; <span class="comment">// false</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="literal">NaN</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>尽量避免使用浮点数进行运算，存在精度问题 , 只能计算它们之差的绝对值，看是否小于某个阈值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> / <span class="number">3</span> === <span class="number">1</span> - <span class="number">2</span> / <span class="number">3</span>); <span class="comment">//false3</span></span><br><span class="line"><span class="built_in">Math</span>.abs(<span class="number">1</span> / <span class="number">3</span> - (<span class="number">1</span> - <span class="number">2</span> / <span class="number">3</span>)) &lt; <span class="number">0.0000001</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h2 id="5、null-和-undefined">5、null 和 undefined</h2>
<p><code>null</code>表示一个 空 的值，它和<code>0</code>以及空字符串<code>''</code>不同，<code>0</code>是一个数值，<code>''</code>表示长度为 0 的字符串，而<code>null</code>表示 什么都没有；</p>
<p>而<code>undefined</code>表示值未定义，仅仅在<strong>判断函数参数是否传递</strong>的情况下有用</p>
<h2 id="6、strict-模式">6、strict 模式</h2>
<p>因为 JS 比较随意，容易出现 bug，所以可以在第一行写 <code>'user strict;' </code>，开启严格检查模式，这样会避免很多问题</p>
<h1>二、操作字符串</h1>
<h2 id="1、返回指定位置的字符">1、返回指定位置的字符</h2>
<p><strong><code>charAt()</code></strong> 返回指定位置的字符，参数是从 0 开始编号的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">String</span>( <span class="string">&#x27;litbaizhan&#x27;</span>);</span><br><span class="line"></span><br><span class="line">s.charAt(<span class="number">1</span>) <span class="comment">// &quot;t&quot;</span></span><br><span class="line">s.charAt(s.1ength - <span class="number">1</span>) <span class="comment">// &quot;n&quot;，返回最后一位</span></span><br></pre></td></tr></table></figure>
<p>如果参数为负数，或大于等于字符串的长度，charAt 返回空字符串</p>
<h2 id="2、连接字符串">2、连接字符串</h2>
<p><strong><code>concat()</code></strong> 用于连接两个字符串，返回一个新字符串，不改变原字符串(其实用<code>+</code>链接更方便)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">&quot;itbaizhan&quot;</span>;</span><br><span class="line">vars2 = <span class="string">&quot;sxt&quot;</span>;</span><br><span class="line">s1.concat(s2); <span class="comment">// &quot;itbaizhansxt&quot;</span></span><br><span class="line">s1; <span class="comment">// &quot;itbaizhan&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//该方法可以接受多个参数</span></span><br><span class="line"><span class="string">&quot;sxt&quot;</span>.concat(<span class="string">&quot;itbaizhan&quot;</span>, <span class="string">&quot;bjsxt&quot;</span>); <span class="comment">// &quot;sxtitbaizhanbjsxt&quot;</span></span><br></pre></td></tr></table></figure>
<p>如果参数不是字符串，<code>concat</code>方法会将其先转为字符串,然后再连接</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> one = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> two = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> three = <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.concat(one， two， three) <span class="comment">// &quot;123&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="3、大小写转换">3、大小写转换</h2>
<p><strong><code>.toUpperCase()</code></strong> 全部转化为大写 , <strong><code>.toLowerCase</code></strong> 全部转化为小写</p>
<h2 id="4、索引">4、索引</h2>
<p><strong><code>.indexOf()</code></strong>，判断字符串中是否存在某个词汇</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;hello, world&quot;</span>;</span><br><span class="line">s.indexOf(<span class="string">&quot;world&quot;</span>); <span class="comment">// 返回 7</span></span><br><span class="line">s.indexOf(<span class="string">&quot;World&quot;</span>); <span class="comment">// 没有找到指定的子串(大写W)，返回-1</span></span><br></pre></td></tr></table></figure>
<p><strong><code>indexOf</code></strong> 方法还可以接受第二个参数,表示从该位置开始向后匹配</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;he11o world&quot;</span>.indexof(<span class="string">&quot;o&quot;</span>, <span class="number">6</span>); <span class="comment">// 7 也就是跳过了第一个o从6开始到了第二个o的位置</span></span><br></pre></td></tr></table></figure>
<h2 id="5、返回指定索引区间的子串">5、返回指定索引区间的子串</h2>
<p><strong><code>substring()</code></strong> 返回指定索引区间的子串 ，一定第二个参数大于第一个参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var s = &#x27;hello, world&#x27;</span><br><span class="line">s.substring(0, 5); // 从索引0开始到5（不包括5），返回&#x27;hello&#x27;</span><br><span class="line">s.substring(7); // 从索引7开始到结束，返回&#x27;world&#x27;</span><br></pre></td></tr></table></figure>
<p><strong><code>substr()</code></strong> 方法的第一个参数是子字符串的开始位置(从 0 开始计算)，第二个参数是子字符串的长度</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;itbaizhan&#x27;</span>.substr(<span class="number">2</span>，<span class="number">7</span>); <span class="comment">// baizhan</span></span><br></pre></td></tr></table></figure>
<p>如果省略第二个参数,则表示子字符串一直到原字符串的结束</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;itbaizhan&quot;</span>.substr(<span class="number">2</span>); <span class="comment">// &quot;baizhan&#x27;</span></span><br></pre></td></tr></table></figure>
<p>如果第一个参数是负数,表示倒数计算的字符位置。如果第二个参数是负数,将被自动转为 0,因此会返回空字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;itbaizhan&#x27;</span>.substr(-<span class="number">7</span>) <span class="comment">// &quot;baizhan&quot;</span></span><br><span class="line"> <span class="string">&#x27;itbaizhan&#x27;</span>. substr(<span class="number">4</span>， -<span class="number">1</span>) <span class="comment">// &quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="6、除字符串两端的空格">6、除字符串两端的空格</h2>
<p><code>trim</code>用于去除字符串两端(不能去除中间)的空格，返回一个新字符串,不改变原字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;he1lo world&quot;</span>.trim(); <span class="comment">// &quot;he1loworld&quot;</span></span><br></pre></td></tr></table></figure>
<p>该方法去除的不仅是空格,还包括制表符(\t、\v)、换行符(\n)和回车符(\r)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;\r\nitbaizhan \t&quot;</span>.trim(); <span class="comment">//&#x27;itbaizhan&#x27;</span></span><br></pre></td></tr></table></figure>
<p>ES6 扩展方法，trimEnd()和 trimstar()方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;  itbaizhan  &quot;</span>.trimEnd(); <span class="comment">//&quot;  itbaizhan&quot; 除去头部空格</span></span><br><span class="line"><span class="string">&quot;  itbaizhan  &quot;</span>.trimStart(); <span class="comment">// &quot;itbaizhan  &quot;除去尾部空格</span></span><br></pre></td></tr></table></figure>
<h2 id="7、分割字符串">7、分割字符串</h2>
<p><code>split()</code> 方法按照给定规则分割字符串,返回一个由分割出来的子字符串组成的数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;it|sxt |baizhan&#x27;</span>.split(<span class="string">&#x27;I&#x27;</span>) <span class="comment">// [&quot;it&quot;， &quot;sxt&quot;， &quot;baizhan&quot;]</span></span><br></pre></td></tr></table></figure>
<p>如果分割规则为空字符串，则返回数组的成员是原字符串的每一个字符。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;alblc&#x27;</span>.split(<span class="string">&#x27;&#x27;</span>) <span class="comment">// [&quot;a&quot;, &quot;I&quot;，&quot;b&quot;,&quot;I&quot;, &quot;c&quot;]</span></span><br></pre></td></tr></table></figure>
<p>如果省略参数,则返回数组的唯一成员就是原字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;it|sxt|bz&#x27;</span>.sp1it() <span class="comment">// [it|sxt|bz]</span></span><br></pre></td></tr></table></figure>
<p>split 方法还可以接受第二个参数,限定返回数组的最大成员数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;it|sxt|bz&#x27;</span>.split(<span class="string">&#x27;I&#x27;</span>, <span class="number">0</span>) <span class="comment">// []</span></span><br><span class="line"><span class="string">&#x27;it|sxt|bz&#x27;</span> .split(<span class="string">&#x27;I&#x27;</span>，<span class="number">1</span>) <span class="comment">// [&quot;it&quot;]</span></span><br><span class="line"><span class="string">&#x27;itlsxt|bz&#x27;</span>.split(<span class="string">&#x27;l&#x27;</span>， <span class="number">2</span>) <span class="comment">// [&quot;it&quot;， &quot;sxt&#x27;&quot;]</span></span><br></pre></td></tr></table></figure>
<h1>三、数组</h1>
<p>数组用<code>[]</code>表示，元素之间用<code>,</code>分隔</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = &#123;<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>，<span class="literal">null</span>，ture，<span class="string">&#x27;hello&#x27;</span>&#125;<span class="comment">//推荐</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span> = (<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>，<span class="literal">null</span>，ture，<span class="string">&#x27;hello&#x27;</span>)<span class="comment">//创建了数组[1，2，3，4，null，ture，&#x27;hello&#x27;]</span></span><br><span class="line"></span><br><span class="line">arr[<span class="number">0</span>]; <span class="comment">// 返回索引为0的元素，即1</span></span><br><span class="line">arr[<span class="number">5</span>]; <span class="comment">// 返回索引为5的元素，即true</span></span><br><span class="line">arr[<span class="number">6</span>]; <span class="comment">// 索引超出了范围，返回undefined</span></span><br></pre></td></tr></table></figure>
<h2 id="1、取得Array的长度">1、取得<code>Array</code>的长度</h2>
<p><strong><code>.length</code></strong> 可以得到并改变数组长度，变长加空数组，变短会使元素丢失</p>
<p>直接给<code>Array</code>的<code>length</code>赋一个新的值会导致<code>Array</code>大小的变化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [1, 2, 3.14, &#x27;Hello&#x27;, null, true];</span><br><span class="line">arr.length; // 6</span><br><span class="line"></span><br><span class="line">arr.length = 8;//数组越界</span><br><span class="line">arr; // arr变为[1, 2, 3.14, &#x27;Hello&#x27;, null, true， undefined, undefined]</span><br><span class="line">arr.length = 2;</span><br><span class="line">arr; // arr变为[1, 2]</span><br></pre></td></tr></table></figure>
<h2 id="2、下标索引赋值">2、下标索引赋值</h2>
<p><code>Array</code>可以通过索引把对应的元素<strong>修改</strong>为新的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;];</span><br><span class="line">arr[1] = 99;</span><br><span class="line">arr; // arr现在变为[&#x27;A&#x27;, 99, &#x27;C&#x27;]</span><br><span class="line"></span><br><span class="line">arr[5] = &#x27;x&#x27;;</span><br><span class="line">arr; // arr变为[&#x27;A&#x27;, 99, &#x27;C&#x27;, undefined, undefined, &#x27;x&#x27;]</span><br></pre></td></tr></table></figure>
<p><code>Array</code>也可以通过<code>indexOf()</code>来搜索一个指定的元素的位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arr.indexOf(99); // 元素99的索引为1</span><br><span class="line">arr.indexOf(30); // 元素30没有找到，返回-1</span><br></pre></td></tr></table></figure>
<h2 id="3、截取数组">3、截取数组</h2>
<p><code>slice()</code>就是对应 String 的<code>substring()</code>版本，它截取<code>Array</code>的部分元素，然后返回一个新的<code>Array</code>：</p>
<h2 id="4、数组增删">4、数组增删</h2>
<p><strong><code>.push()</code></strong> 数组尾部增加 ， <strong><code>.pop()</code></strong> 数组尾部弹出一个元素 ; <strong><code>.unshift（）</code></strong> 压入头部 ，<strong><code>.shift（）</code></strong> 弹出头部的一个元素。加入循环可以清空一个数组。</p>
<p><strong><code>splice()</code></strong> 方法是修改<code>Array</code>的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">arr.push(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>); <span class="comment">// 返回Array新的长度: 4</span></span><br><span class="line">arr; <span class="comment">// [1, 2, &#x27;A&#x27;, &#x27;B&#x27;]</span></span><br><span class="line">arr.pop(); <span class="comment">// pop()返回&#x27;B&#x27;</span></span><br><span class="line">arr; <span class="comment">// [1, 2, &#x27;A&#x27;]</span></span><br><span class="line">arr.pop();</span><br><span class="line">arr.pop();</span><br><span class="line">arr.pop(); <span class="comment">// 连续pop 3次</span></span><br><span class="line">arr; <span class="comment">// []</span></span><br><span class="line">arr.pop(); <span class="comment">// 空数组继续pop不会报错，而是返回undefined</span></span><br><span class="line">arr; <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//splice</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;Microsoft&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Yahoo&quot;</span>, <span class="string">&quot;AOL&quot;</span>, <span class="string">&quot;Excite&quot;</span>, <span class="string">&quot;Oracle&quot;</span>];</span><br><span class="line"><span class="comment">// 从索引2开始删除3个元素,然后再添加两个元素:</span></span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;Google&quot;</span>, <span class="string">&quot;Facebook&quot;</span>); <span class="comment">// 返回删除的元素 [&#x27;Yahoo&#x27;, &#x27;AOL&#x27;, &#x27;Excite&#x27;]</span></span><br><span class="line">arr; <span class="comment">// [&#x27;Microsoft&#x27;, &#x27;Apple&#x27;, &#x27;Google&#x27;, &#x27;Facebook&#x27;, &#x27;Oracle&#x27;]</span></span><br><span class="line"><span class="comment">// 只删除,不添加:</span></span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">2</span>); <span class="comment">// [&#x27;Google&#x27;, &#x27;Facebook&#x27;]</span></span><br><span class="line">arr; <span class="comment">// [&#x27;Microsoft&#x27;, &#x27;Apple&#x27;, &#x27;Oracle&#x27;]</span></span><br><span class="line"><span class="comment">// 只添加,不删除:</span></span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="string">&quot;Google&quot;</span>, <span class="string">&quot;Facebook&quot;</span>); <span class="comment">// 返回[],因为没有删除任何元素</span></span><br><span class="line">arr; <span class="comment">// [&#x27;Microsoft&#x27;, &#x27;Apple&#x27;, &#x27;Google&#x27;, &#x27;Facebook&#x27;, &#x27;Oracle&#x27;]</span></span><br></pre></td></tr></table></figure>
<h2 id="5、数组排序">5、数组排序</h2>
<p>它会直接修改当前<code>Array</code>的元素位置，直接调用时，按照默认顺序排序，可以在函数里定义排列顺序</p>
<p><strong><code>.sort()</code></strong> [“c”,“b”,“a”] --&gt; [“a”,“b”,“c”]</p>
<h2 id="6、反转">6、反转</h2>
<p><code>reverse()</code>把整个<code>Array</code>的元素给调个个，也就是反转</p>
<p><strong><code>.reverse()</code></strong> [“a”,“b”,“c”]–&gt;{[“c”,“b”,“a”]</p>
<h2 id="7、数组拼接">7、数组拼接</h2>
<p><strong><code>.concat()</code></strong> 直接将其拼入数组尾部，<strong>但不改变原数组</strong>，常用于上拉加载合并数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;];</span><br><span class="line">var added = arr.concat([1, 2, 3]);</span><br><span class="line">added; // [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, 1, 2, 3]</span><br><span class="line">arr; // [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span><br></pre></td></tr></table></figure>
<h2 id="8、连接符">8、连接符</h2>
<p><strong><code>.join()</code></strong> arr=[“a”,“b”,“c”] arr.join(-) --&gt; “a-b-c”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, 1, 2, 3];</span><br><span class="line">arr.join(&#x27;-&#x27;); // &#x27;A-B-C-1-2-3&#x27;</span><br></pre></td></tr></table></figure>
<h2 id="9、多维数组">9、多维数组</h2>
<p>如果数组的某个元素又是一个<code>Array</code>，则可以形成多维数组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arr=[[1,2,a],[3,4,b],[5,6,c]]</span><br></pre></td></tr></table></figure>
<p>上述<code>Array</code>包含 3 个元素，其中头两个元素本身也是<code>Array</code></p>
<h2 id="10、数组组判断">10、数组组判断</h2>
<p>AraysAray 方法返回-一个布尔值，表示参数是否为数组。它可以弥补 typeof 运算符的不足</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;尚学堂&quot;</span>， <span class="number">100</span>，<span class="literal">true</span>];</span><br><span class="line"><span class="built_in">console</span>.1og(<span class="keyword">typeof</span> arr); <span class="comment">// object</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;sxt&#x27;</span>， <span class="string">&#x27;baizhan&#x27;</span>， <span class="string">&#x27;it&#x27;</span>];</span><br><span class="line"><span class="built_in">Array</span>. isArray(arr) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h1>四、对象</h1>
<p>用一个<code>&#123;...&#125;</code>表示一个对象，键值对以<code>xxx: xxx</code>形式申明，用<code>,</code>隔开 ; <strong>属性：属性值</strong>，值得注意的是，如果对象里面还有一个对象，那么就形成了链式调用，类似包名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">    name: &#x27;Bob&#x27;,</span><br><span class="line">    age: 20,</span><br><span class="line">    tags: [&#x27;js&#x27;, &#x27;web&#x27;, &#x27;mobile&#x27;],</span><br><span class="line">    city: &#x27;Beijing&#x27;,</span><br><span class="line">    hasCar: true,</span><br><span class="line">    zipcode: null</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="1、获取属性">1、获取属性</h2>
<p>要获取一个对象的属性，我们用<code>对象变量.属性名</code>的方式 , 也可以用<code>xiaohong['name']</code>来访问<code>xiaohong</code>的<code>name</code>属性，不过<code>xiaohong.name</code>的写法更简洁，访问一个不存在的属性会返回<code>undefined</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">    name: &#x27;Bob&#x27;,</span><br><span class="line">    age: 20,</span><br><span class="line">    tags: [&#x27;js&#x27;, &#x27;web&#x27;, &#x27;mobile&#x27;]</span><br><span class="line">&#125;;</span><br><span class="line">person.name; // &#x27;Bob&#x27;</span><br><span class="line">person.city; // undefined</span><br></pre></td></tr></table></figure>
<h2 id="2、属性删减">2、属性删减</h2>
<p>由于 JavaScript 的对象是动态类型，你可以自由地给一个对象添加或删除属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete xiaoming.age; // 删除age属性，返回`true`</span><br></pre></td></tr></table></figure>
<h2 id="3、判断属性值是否存在">3、判断属性值是否存在</h2>
<p>用<code>in</code>操作符：xxx in xxx ，<strong>注意！</strong> 如果<code>in</code>判断一个属性存在，这个属性不一定是<code>person</code>的，它可能是<code>person</code>继承得到的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;name&#x27; in person; // true</span><br><span class="line">&#x27;grade&#x27; in person; // false</span><br><span class="line"></span><br><span class="line">//注意</span><br><span class="line">&#x27;toString&#x27; in person; // true</span><br></pre></td></tr></table></figure>
<p>因为<code>toString</code>定义在<code>object</code>对象中，所以<code>person</code>也拥有<code>toString</code>属性</p>
<p>可以用 <strong><code>hasOwnProperty()</code></strong> 判断属性是否自身拥有</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">person.hasOwnProperty(toString)  //返回false</span><br></pre></td></tr></table></figure>
<h1>五、条件判断和循环</h1>
<p>因为和 Java 基本一致就不再赘述，<a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023023817686336">详细见</a></p>
<h2 id="1、Map-和-Set">1、Map 和 Set</h2>
<p>JavaScript 的对象有个小问题，就是键必须是字符串。但实际上 Number 或者其他数据类型作为键也是非常合理的。为了解决这个问题，最新的 ES6 规范引入了新的数据类型<code>Map</code></p>
<h3 id="1-1、Map">1.1、Map</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES6 Map</span></span><br><span class="line"><span class="comment">//学生的成绩，学生的名字</span></span><br><span class="line"><span class="comment">// var names = [&quot;tom&quot;，&quot;jack&quot;，&quot;haha&quot;];</span></span><br><span class="line"><span class="comment">// var scores = [100,90,80];</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&#x27;tom&#x27;</span> ,<span class="number">100</span>] ,[<span class="string">&#x27;jack&#x27;</span> , <span class="number">90</span>],[<span class="string">&#x27;haha&#x27;</span>, <span class="number">80</span>]]);</span><br><span class="line"><span class="keyword">var</span> name = map. get(<span class="string">&#x27;tom&#x27;</span>); <span class="comment">//通过key获得va1ue</span></span><br><span class="line">map.set(<span class="string">&#x27;admin&#x27;</span> ,<span class="number">123456</span>); <span class="comment">//增加修改</span></span><br><span class="line">map.delete(<span class="string">&quot;tom&quot;</span>) <span class="comment">//删除</span></span><br></pre></td></tr></table></figure>
<p>由于一个 key 只能对应一个 value，所以，多次对一个 key 放入 value，后面的值会把前面的值冲掉</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var m = new Map();</span><br><span class="line">m.set(&#x27;Adam&#x27;, 67);</span><br><span class="line">m.set(&#x27;Adam&#x27;, 88);</span><br><span class="line">m.get(&#x27;Adam&#x27;); // 88</span><br></pre></td></tr></table></figure>
<h3 id="1-2、Set">1.2、Set</h3>
<p><code>Set</code>和<code>Map</code>类似，也是一组 key 的集合，但不存储 value，所以 key 不能重复</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">set.add(<span class="number">2</span>); <span class="comment">//添加</span></span><br><span class="line">set.delete(<span class="number">1</span>); <span class="comment">//删除</span></span><br><span class="line"><span class="built_in">console</span>. 1og(set. has(<span class="number">3</span>)); -<span class="comment">//是否包含某 个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//重复元素在`Set`中自动被过滤</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="string">&#x27;3&#x27;</span>]);</span><br><span class="line">s; <span class="comment">// Set &#123;1, 2, 3, &quot;3&quot;&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="2、iterator">2、iterator</h2>
<p>遍历<code>Array</code>可以采用下标循环，遍历<code>Map</code>和<code>Set</code>就无法使用下标。为了统一集合类型，ES6 标准引入了新的<code>iterable</code>类型，<code>Array</code>、<code>Map</code>和<code>Set</code>都属于<code>iterable</code>类型。具有<code>iterable</code>类型的集合可以通过新的<code>for ... of</code>循环来遍历。</p>
<h3 id="2-1、for-…-of-和-for-…-in">2.1、for … of 和 for … in</h3>
<p>遍历集合：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;];</span><br><span class="line">var s = new Set([&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]);</span><br><span class="line">var m = new Map([[1, &#x27;x&#x27;], [2, &#x27;y&#x27;], [3, &#x27;z&#x27;]]);</span><br><span class="line">for (var x of a) &#123; // 遍历Array</span><br><span class="line">    console.log(x);</span><br><span class="line">&#125;</span><br><span class="line">for (var x of s) &#123; // 遍历Set</span><br><span class="line">    console.log(x);</span><br><span class="line">&#125;</span><br><span class="line">for (var x of m) &#123; // 遍历Map</span><br><span class="line">    console.log(x[0] + &#x27;=&#x27; + x[1]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>for ... of</code>循环和<code>for ... in</code>循环的<strong>区别</strong>：<code>for ... in</code>它遍历的实际上是对象的属性名称，<code>for ... of</code>它只循环集合本身的元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;];</span><br><span class="line">a.name = &#x27;Hello&#x27;;</span><br><span class="line">for (var x in a) &#123;</span><br><span class="line">    console.log(x); // &#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;name&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2、forEach">2.2、forEach</h3>
<p><code>forEach()</code>方法是 ES5.1 标准引入的<br>
只需要获得<code>Array</code>的<code>element</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>];</span><br><span class="line">a.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(element);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>Map</code>的回调函数参数依次为<code>value</code>、<code>key</code>和<code>map</code>本身</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var m = new Map([[1, &#x27;x&#x27;], [2, &#x27;y&#x27;], [3, &#x27;z&#x27;]]);</span><br><span class="line">m.forEach(function (value, key, map) &#123;</span><br><span class="line">    console.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>Set</code>与<code>Array</code>类似，但<code>Set</code>没有索引，因此回调函数的前两个参数都是元素本身</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var s = new Set([&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]);</span><br><span class="line">s.forEach(function (element, sameElement, set) &#123;</span><br><span class="line">    console.log(element);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>set 可以认为是去除了 value 的 map , 他的存储模式是和 map 一样的, 数组+链表 or 红黑树的方式。而 array 是单纯的数组.</p>
<h1>六、函数</h1>
<p>函数就是最基本的一种代码抽象的方式</p>
<h2 id="1、函数的定义和调用">1、函数的定义和调用</h2>
<p>函数提升：可以先调用再定义</p>
<h3 id="1-1、函数的定义">1.1、函数的定义</h3>
<p>定义函数的方式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//方式一</span><br><span class="line">//abs()函数实际上是一个函数对象，而函数名`abs`可以视为指向该函数的变量</span><br><span class="line">function abs(x) &#123;</span><br><span class="line">    if (x &gt;= 0) &#123;</span><br><span class="line">        return x;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//方式二</span><br><span class="line">//是一个匿名函数，它没有函数名</span><br><span class="line">var abs = function (x) &#123;</span><br><span class="line">    if (x &gt;= 0) &#123;</span><br><span class="line">        return x;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>function</code>指出这是一个函数定义； <code>abs</code>是函数的名称；函数体内部的语句在执行时。一旦执行到<code>return</code>时，函数就执行完毕，并将结果返回；如果没有<code>return</code>语句返回<code>undefined</code></p>
<p>上述两种定义<strong>完全等价</strong></p>
<p>调用函数时，按顺序传入参数即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abs(10); // 返回10</span><br><span class="line">abs(-9); // 返回9</span><br><span class="line">abs(); //此时`abs(x)`函数的参数`x`将收到`undefined`， 返回NaN</span><br></pre></td></tr></table></figure>
<p>通俗点说，函数就是抽象封装的东西，用来提高代码的复用性</p>
<h3 id="1-2、arguments">1.2、arguments</h3>
<p>它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。 利用<code>arguments</code>，你可以获得调用者传入的所有参数。也就是说，即使函数不定义任何参数，还是可以拿到参数的值；常用于判断传入参数的个数</p>
<h3 id="1-3、rest-参数">1.3、rest 参数</h3>
<p>以前:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">arguments</span>.1ength &gt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        <span class="comment">//。。。。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ES6 引入的新特性，获取除了已经定义的参数之外的所有参数~ …</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params">a, b, ...rest</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.1og(<span class="string">&quot;a=&gt;&quot;</span> + a);</span><br><span class="line">    <span class="built_in">console</span>.1og(<span class="string">&quot;b=&gt;&quot;</span> + b);</span><br><span class="line">    <span class="built_in">console</span>.1og(rest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2、变量的作用域">2、变量的作用域</h2>
<p>变量的作用域在 javascript 中，var 定义变量实际是有作用域的。假设在函数体中声明，则在函数体外不可以使用~！（闭包）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qj</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  varX = <span class="number">1</span>;</span><br><span class="line">  X = X + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">x = x + <span class="number">2</span>; <span class="comment">//Uncaught ReferenceError: x is not defined</span></span><br></pre></td></tr></table></figure>
<p>如果两个函数使用了相同的变量名，只要在函数内部，就不冲突;内部函数可以访问外部函数的成员，反之则不行</p>
<p>假如内部函数变量和外部函数的变量，重名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qj</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    varx = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">qj2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        varx = <span class="string">&#x27; A&#x27;</span>;</span><br><span class="line">        <span class="built_in">console</span>.1og(<span class="string">&#x27;inner&#x27;</span> + x); <span class="comment">// outer1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.1og(<span class="string">&#x27;outer&#x27;</span> + x); <span class="comment">//innerA</span></span><br><span class="line">    qj2()</span><br><span class="line">&#125;</span><br><span class="line">qj()</span><br></pre></td></tr></table></figure>
<p>假设在 JavaScript 中函数查找变量从自身函数开始~，<strong>由内向外</strong>查找.假设外部存在这个同名<br>
的函数变量，则内部函数会屏蔽外部函数的变量。</p>
<h3 id="2-1、提升变量作用域">2.1、提升变量作用域</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function qj() &#123;</span><br><span class="line">    var x = &quot;x”+y;</span><br><span class="line">console.1og(x);</span><br><span class="line">vary=&#x27;y&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">// 结果 x undefined</span><br></pre></td></tr></table></figure>
<p>说明;<br>
js 执行引擎,自动提升了 y 的声明，但是不会提升变量 y 的赋值’;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">qj2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> y;</span><br><span class="line">varx=<span class="string">&quot;x&quot;</span>+y;</span><br><span class="line"><span class="built_in">console</span>.1og(x);</span><br><span class="line">y =<span class="string">&#x27;y &#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个是在 JavaScript 建立之初就存在的特性。养成规范:所有的变量定义都放在函数的头部，不要乱放,便于代码维护;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qj2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   varx = <span class="number">1</span>,</span><br><span class="line">   y = x + <span class="number">1</span>,</span><br><span class="line">   z,i,a; <span class="comment">//undefined</span></span><br><span class="line">   <span class="comment">//之后随意用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2、全局函数">2.2、全局函数</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局变量</span></span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.1og(x);</span><br><span class="line">    f();</span><br><span class="line">    <span class="built_in">console</span>.1og(x);</span><br></pre></td></tr></table></figure>
<h3 id="2-3、全局对象-window">2.3、全局对象 window</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">varX一XXX，alert(x);</span><br><span class="line">alert(<span class="built_in">window</span>.x); <span class="comment">//默认所有的全局变量，都会自动绑定在window对象下;</span></span><br></pre></td></tr></table></figure>
<p>alert()这个函数本身也是一个 window 变量;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">varx = <span class="string">&#x27; xXx&#x27;</span>;</span><br><span class="line"><span class="built_in">window</span>.alert(x);</span><br><span class="line"><span class="keyword">var</span> o1d_ alert = <span class="built_in">window</span>.alert;</span><br><span class="line"><span class="comment">//o1d_ alert(x);</span></span><br><span class="line"><span class="built_in">window</span>.alert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="comment">//发现alert() 失效了</span></span><br><span class="line"><span class="built_in">window</span>.alert(<span class="number">123</span>);</span><br><span class="line"><span class="comment">//恢复</span></span><br><span class="line"><span class="built_in">window</span>.alert = o1d_ alert;</span><br><span class="line"><span class="built_in">window</span>.alert(<span class="number">456</span>);</span><br></pre></td></tr></table></figure>
<p>Javascript 实际上只有一个全局作用域，任何变量 (函数也可以视为变量)， 假设没有在函数作用<br>
范围内找到，就会向外查找，如果在全局作用域都没有找到，报错<br>
<code>RefrenceError</code></p>
<h3 id="2-4、规范">2.4、规范</h3>
<p>由于我们所有的全局变量都会绑定到我们的 window.上。如果不同的 js 文件，使用了相同的全局变<br>
量，冲突~&gt;如果能够减少冲突?</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//唯一全局变量</span></span><br><span class="line"><span class="keyword">var</span> KuangApp = &#123;&#125;;</span><br><span class="line"><span class="comment">//定义全局变量</span></span><br><span class="line">KuangApp. name =<span class="string">&#x27; kuangshen</span></span><br><span class="line"><span class="string">KuangApp.add = function (a,b) &#123;</span></span><br><span class="line"><span class="string">return a + b;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<p>把自己的代码全部放入自己定义的唯一空间名字中，降低全局命名冲突的问题~<br>
jQuery --&gt; $()</p>
<h3 id="2-5、局部作用域-let">2.5、局部作用域 let</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (vari = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.1og(i) <span class="built_in">console</span>.1og(i + <span class="number">1</span>); <span class="comment">//问题? i 出了这个作用域还可以使用</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>解决局部作用域冲突问题，建议用 let 定义局部作用域变量</p>
<h3 id="2-6、常量-const">2.6、常量 const</h3>
<p>在 ES6 之前建议使用大写字母来定义的变量作为常量，建议不要修改，ES6 之后引入了常量关键字<code>const</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="string">&#x27;3.14&#x27;</span>; <span class="comment">//只读变量</span></span><br><span class="line"><span class="built_in">console</span>.1og(PI);</span><br><span class="line">PI = <span class="string">&#x27; 123&#x27;</span>; <span class="comment">// TypeError: Assi gnment to constant variable.</span></span><br><span class="line"><span class="built_in">console</span>.1og(PI);</span><br></pre></td></tr></table></figure>
<h2 id="3、方法">3、方法</h2>
<p>把函数放在对象里面，只有属性和方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> kuangshen = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;秦 疆&#x27;</span>bitrh: <span class="number">2000</span>，</span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="attr">age</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//今年一出生的年</span></span><br><span class="line">        <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFu11Year();</span><br><span class="line">        <span class="keyword">return</span> now - <span class="built_in">this</span>.bitrh;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    kuangshen.name</span><br><span class="line">    <span class="comment">//方法,一定要带()</span></span><br><span class="line">    kuangshen.age()</span><br></pre></td></tr></table></figure>
<p>this 代表什么？拆开代码看看</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//今年-出生的年</span></span><br><span class="line">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFul1Year();</span><br><span class="line">    <span class="keyword">return</span> now - <span class="built_in">this</span>.bitrh;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> kuangshen = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;秦疆&#x27;</span>，bitrh: <span class="number">2000</span>，age: getAge</span><br><span class="line">    <span class="comment">// kuangshen.age() ok</span></span><br><span class="line">    <span class="comment">// getAge()  NaN  window</span></span><br></pre></td></tr></table></figure>
<p>可以看出调用<code>getAge()</code>方法失败，因为 window 里没有<code>this.birth</code>所以调用失败</p>
<h3 id="apply">apply</h3>
<p>在 js 中可以控制 this 的指向</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//今年-出生的年</span></span><br><span class="line">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">    <span class="keyword">return</span> now - <span class="built_in">this</span>.bitrh;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> kuangshen = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;秦疆&#x27;</span>，bitrh: <span class="number">2000</span>,</span><br><span class="line">    <span class="attr">age</span>: getAge</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// kuangshen.age() ok</span></span><br><span class="line">getAge.app1y(kuangshen, []); <span class="comment">// this， 指向了kuangshen这个对象， 参数为空</span></span><br></pre></td></tr></table></figure>
<p><code>apply</code>可以让方法里的 this 指向某个对象，获取改对象的属性和属性值，即调用可以成功</p>
<h1>七、简单对象</h1>
<h2 id="1、Date">1、Date</h2>
<p>JavaScript 的 Date 对象月份值从 0 开始，牢记 0=1 月，1=2 月，2=3 月，……，11=12 月。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="regexp">/ /</span>Sat Jan <span class="number">04</span> <span class="number">2020</span> <span class="number">10</span>:<span class="number">4</span>/ :<span class="number">06</span> GMT+<span class="number">0800</span> ( 中国标准时间)</span><br><span class="line">now. getFul1year(); <span class="comment">//年</span></span><br><span class="line">now. getMonth(); <span class="comment">//月  0~11 代表月</span></span><br><span class="line">now. getDate(); <span class="comment">//日</span></span><br><span class="line">now. getDay(); <span class="comment">//星期几</span></span><br><span class="line">now. getHours(); <span class="comment">// 时</span></span><br><span class="line">now. getMinutes(); <span class="comment">//分</span></span><br><span class="line">now. getSeconds(); <span class="comment">//秒</span></span><br><span class="line"></span><br><span class="line">now. getTime(); <span class="comment">//时间戳全世界统-一1970 1.1 0:00:00毫秒数</span></span><br><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1435146562875</span>);</span><br><span class="line">d; <span class="comment">// Wed Jun 24 2015 19:49:22 GMT+0800 (CST)//时间戳转 为时间</span></span><br><span class="line">d.getMonth(); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">now.toLocalestring() <span class="comment">//获得本地时间</span></span><br><span class="line">now.toGMTString() <span class="comment">//获得GMT时间</span></span><br></pre></td></tr></table></figure>
<p>如果要创建一个指定日期和时间的<code>Date</code>对象，可以用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2020</span>, <span class="number">5</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">30</span>, <span class="number">123</span>); <span class="comment">// 年,月,日,时,分,秒,毫秒</span></span><br></pre></td></tr></table></figure>
<h2 id="2、JSON">2、JSON</h2>
<p>JSON 是超轻量级的数据交换格式，能有效的提升网络传输效率</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;qinjiang&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//对象转化为json字符串&#123;&quot;name&quot; : &quot;qinjiang&quot;，&quot;age&quot;:3, &quot;sex&quot;:&quot;男&quot;&#125;</span></span><br><span class="line"><span class="keyword">var</span> jsonUser = <span class="built_in">JSON</span>.stringify(user);</span><br><span class="line"><span class="comment">//json字符串转化为对象参数为json字符串</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(<span class="string">&#x27;&#123;&quot;name&quot;:&quot;qinjiang&quot;, &quot;age&quot;:3,&quot;sex&quot;:&quot;男&quot;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="3、Math">3、<code>Math</code></h2>
<h3 id="3-1、Math-abs-返回参数值的绝对值">3.1、Math.abs()返回参数值的绝对值</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.abs(<span class="number">1</span>); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">Math</span>.abs(-<span class="number">1</span>); <span class="comment">//1</span></span><br></pre></td></tr></table></figure>
<h3 id="3-2、Math-max-Math-min">3.2、Math.max(), Math.min()</h3>
<p>Math.max 方法返回参数之中最大的那个值，Math.min 返回最小的那个值。如果参数为空，Math.min 返回 Infinity，Math.max 返回-Infinity。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>. max(<span class="number">2</span>, -<span class="number">1</span>，<span class="number">5</span>) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">Math</span>.min(<span class="number">2</span>, -<span class="number">1</span>，<span class="number">5</span>) <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">Math</span>.min() <span class="comment">// Infinity</span></span><br><span class="line"><span class="built_in">Math</span>.max() <span class="comment">// -Infinity</span></span><br></pre></td></tr></table></figure>
<h3 id="3-3、Math-random">3.3、Math.random()</h3>
<p>Math.random()返回 0 到 1 之间的-一个伪随机数，可能等于 0,但是-定小于 1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.random(); <span class="comment">// 0.28525367438365223</span></span><br></pre></td></tr></table></figure>
<p>任意范围(main——max)的随机数生成函数如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomArbitrary</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.random() * (max - min) + min;</span><br><span class="line">&#125;</span><br><span class="line">getRandomArbitrary(<span class="number">5</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<h3 id="3-4、Math-floor-Math-ceil">3.4、Math.floor(), Math.ceil()</h3>
<p>Math.loor 方法返回小于参数值的最大整数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.f1oor(<span class="number">3.2</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">Math</span>.f1oor(-<span class="number">3.2</span>); <span class="comment">// -4</span></span><br></pre></td></tr></table></figure>
<p>Math.ceil 方法返回大于参数值的最小整数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.cei1(<span class="number">3.2</span>); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(-<span class="number">3.2</span>); <span class="comment">// -3</span></span><br></pre></td></tr></table></figure>
<h1>七、面向对象</h1>
<h2 id="1、原型继承">1、原型继承</h2>
<p>通过<code>.__proto__</code>继承后，被继承的对象类似于父类</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> student = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;qinjiang&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">3</span>, <span class="attr">run</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot; run....&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//xiaoming里没有age属性，没有run方法</span></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//xiaoming相当于继承了对象student，会run有年龄有名字</span></span><br><span class="line">xiaoming.__proto__ = student;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果再次继承则会覆盖，以最后的一次继承的对象为父类</span></span><br><span class="line"><span class="keyword">var</span> Bird = &#123;</span><br><span class="line">    <span class="attr">fly</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.1og(<span class="built_in">this</span>.name + <span class="string">&quot;fl....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//小明的原型是student，现在xiaoming只会fly和有名字</span></span><br><span class="line">xiaoming._ proto__ = Bird;</span><br></pre></td></tr></table></figure>
<h2 id="2、class-继承">2、class 继承</h2>
<p><code>class</code>和 Java 是面向对象非常相似,<code>extends</code>继承也和 Java 很像</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个学生的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  <span class="comment">//构造器</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//都是无返回值的方法</span></span><br><span class="line">  <span class="function"><span class="title">he11o</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    alert(<span class="string">&quot;he11o&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Student(<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> xiaohong = <span class="keyword">new</span> Student(<span class="string">&quot;xiaohong&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承后super调用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xiaostudent</span> <span class="keyword">extends</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, grade</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">    <span class="built_in">this</span>.grade = grade;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//自己的方法</span></span><br><span class="line">  <span class="function"><span class="title">myGrade</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    alert(<span class="string">&quot;我是一名小学生&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> xiao = <span class="keyword">new</span> xiaostudent(<span class="string">&quot;xiaostudent&quot;</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<p>我们打印<code>xiao</code>可以发现<code>xiaostudent</code>的原型是<code>Student</code>，而<code>Student</code>的原型是<code>Object</code>，那<code>Object</code>的原型是谁？我们把这种链状关系叫原型链<br>
<img data-src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a10a3a29cf1842f3b9b6ea24bd543066~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<p><a href="https://juejin.cn/post/6934498361475072014">深入原型链</a></p>
<p><img data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/82fa92c22714407f90e96d1846e7a3ab~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<h1>八、浏览器</h1>
<h2 id="1、操作-BOM-对象">1、操作 BOM 对象</h2>
<p>BOM 就是浏览器模型</p>
<ul>
<li>Window：浏览器窗口</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.alert(<span class="number">1</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.innerHeight</span><br><span class="line"><span class="number">258</span></span><br><span class="line"></span><br><span class="line">wi ndow.innerwidth</span><br><span class="line"><span class="number">919</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.outerHeight</span><br><span class="line"><span class="number">994</span></span><br><span class="line"></span><br><span class="line">wi n dow.outerWidth</span><br><span class="line"><span class="number">919</span></span><br><span class="line"><span class="comment">//还有很多，可以自己再浏览器尝试</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Navigater：封装了浏览器信息，但不建议使用</li>
<li>Screen：屏幕尺寸</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">screen.width</span><br><span class="line"><span class="number">1920</span> px</span><br><span class="line">screen.height</span><br><span class="line"><span class="number">1080</span> px</span><br></pre></td></tr></table></figure>
<ul>
<li>location：当前页面 url 信息
<ul>
<li>host：主机</li>
<li>href：当前指向位置</li>
<li>protocol：协议</li>
<li>reload：方法； f reloadl:刷新</li>
<li>location:assign(‘url’)：设置新地址</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">host: <span class="string">&quot;www.baidu.com</span></span><br><span class="line"><span class="string">href: &quot;</span>https:<span class="comment">//www.baidu.com/&quot;</span></span><br><span class="line">protoco1: <span class="string">&quot;https:&quot;</span></span><br><span class="line"><span class="attr">reload</span>: f reload() <span class="comment">// 刷新网页</span></span><br><span class="line"><span class="comment">//设置新的地址</span></span><br><span class="line">location.assi gn(<span class="string">&#x27;https://b7og.kuangstudy.com/&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>document：代表当前页面；HTML DOM 文档树，可以获取，删除，增加文档树节点，还可以获取 cookie 等,后面细讲</p>
</li>
<li>
<p>history：浏览器历史记录,不建议使用</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">history.back(); <span class="comment">//后退</span></span><br><span class="line">history.forward(); <span class="comment">//前进</span></span><br></pre></td></tr></table></figure>
<h2 id="2、操作-DOM">2、操作 DOM</h2>
<p>DOM 是 JavaScript<strong>操作网页的接口</strong>，全称为&quot;文档对象模型&quot;(Document Object Model)。它的作用是将网<br>
页转为一个 JavaScript 对象，从而可以用脚本进行各种操作(比如对元素增删内容)</p>
<p>浏览器会根据 DOM 模型，将结构化文档 HTML 解析成一系列的节点， 再由这些节点组成一个树状结构(DOM<br>
Tree)。<strong>所有的</strong> <strong>节点和最终的树状结构，都有规范的对外接口</strong></p>
<p>浏览器网页就是 DOM 树结构</p>
<ul>
<li>更新:更新 Dom 节点</li>
<li>遍历 dom 节点:得到 Dom 节点</li>
<li>删除:删除一个 Dom 节点</li>
<li>添加:添加一个新的节点</li>
</ul>
<h3 id="2-1、获得节点">2.1、获得节点</h3>
<p>DOM 的最小组成单位叫做节点(node) 。文档的树形结构(DOM 树)，就是由各种不同类型的节点组成。<br>
每个节点可以看作是文档树的一片叶子</p>
<p><img data-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b3bd59d53c8c4393a25a76f358e124fa~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<p><strong>节点类型</strong></p>
<ul>
<li>Document: 整个文档树的顶层节点</li>
<li>DocumentType: doctype 标签</li>
<li>Element: 网页的各种 HTML 标签</li>
<li>Attribute: 网页元素的属性(比如 class=“right”)</li>
<li>Text: 标签之间或标签包含的文本</li>
<li>Comment: 注释</li>
<li>DocumentFragment:文档的片段（不常用）</li>
</ul>
<p>要操作一个 Dom 节点，就必须要先获得这个 Dom 节点，获取方式对应 css 选择器，比如标签选择器、<code>id</code>、<code>class</code>等</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题一<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">name</span>=<span class="string">&quot;p3&quot;</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-1-1、标签获取">2.1.1、标签获取</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果有多个相应标签可以在后面通过添加[]来选取对应的标签</span></span><br><span class="line"><span class="keyword">var</span> h1 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;h1&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>document.getElementsByTagName 方法搜索 HTML 标签名,返回符合条件的元素。它的返回值是一个类似数组对象<br>
( HTMColelon 实例)，可以实时反映 HTML 文档的变化。如果没有任何匹配的元素，就返回一个空集</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> paras = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;p&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>如果传入。，就可以返回文档中所有 HTML 元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a11Elements = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;*&quot;</span>);</span><br></pre></td></tr></table></figure>
<h4 id="2-1-2、类获取">2.1.2、类获取</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p2 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;p2&quot;</span>);</span><br></pre></td></tr></table></figure>
<h4 id="2-1-3、id-获取">2.1.3、id 获取</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;p1&quot;</span>);</span><br></pre></td></tr></table></figure>
<h4 id="2-1-4、name-获取">2.1.4、name 获取</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用率低</span></span><br><span class="line"><span class="keyword">var</span> h1 = <span class="built_in">document</span>.getElementsByName(<span class="string">&quot;p3&quot;</span>);</span><br></pre></td></tr></table></figure>
<h4 id="2-1-5、关系获取">2.1.5、关系获取</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> father = <span class="built_in">document</span>.getElementById(<span class="string">&quot;father&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> childrens = father.children; <span class="comment">//获取父节点下的所有子节点</span></span><br><span class="line">father.firstChild; <span class="comment">//子节点的第一个节点</span></span><br><span class="line">father.LastChild; <span class="comment">//子节点的最后一个节点</span></span><br><span class="line">father.Next; <span class="comment">//子节点的下一个节点</span></span><br></pre></td></tr></table></figure>
<h4 id="2-1-6、document-querySelector">2.1.6、document.querySelector()</h4>
<p>document.uerSelecor 方法接受一个 CSS 选择器作为参数,返回匹配该选择器的元素节点。如果有多个节点满足<br>
匹配条件，则返回第一个匹配的节点。如果没有发现匹配的节点，则返回 null</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> e11 = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.myclass&quot;</span>);</span><br></pre></td></tr></table></figure>
<h4 id="2-1-7、document-querySelectorAll">2.1.7、document.querySelectorAll()</h4>
<p>document. qesSelectoll 方法与 queysSelector 用法类似，区别是返回一个 NodeList 对象，包含所有匹配给定选择器的<br>
节点</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> elementList = <span class="built_in">document</span>.queryselectorA11(<span class="string">&quot; .myclass&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>以上都是原生代码，后面推荐使用 jQuery</p>
<h3 id="2-2、更新节点">2.2、更新节点</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//id1 是获取的到的节点</span></span><br><span class="line">id1.innerText = <span class="string">&quot;456&quot;</span>; <span class="comment">//文本的值</span></span><br><span class="line">id1.innerHTML = <span class="string">&quot;&lt;strong&gt; 123&lt;/strong&gt;&quot;</span>; <span class="comment">//以解析HTML文本标签</span></span><br><span class="line"></span><br><span class="line">id1.sty1e.color = <span class="string">&quot;yel1ow&quot;</span>; <span class="comment">//属性使用字符串包裹</span></span><br><span class="line">id1.style.fontSize = <span class="string">&quot; 20px&quot;</span>; <span class="comment">// 一转驼峰命名问题</span></span><br><span class="line">id1.sty1e.padding = <span class="string">&quot;2em&quot;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="2-3、删除节点">2.3、删除节点</h3>
<p>要通过父节点获取子节点来删除子节点</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题一-<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> se1f = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;p1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> father = p1.parentElement;</span></span><br><span class="line"><span class="javascript">    father.removeChild(sejf)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//动态过程，主要索引的下标变化</span></span></span><br><span class="line"><span class="javascript">    father.removeChi 1d(father.chi1dren [<span class="number">0</span>])</span></span><br><span class="line"><span class="javascript">    father.removeChi 1d(father.chi1dren [<span class="number">1</span>])</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意:删除多个节点的时候，children 是在时刻变化的,</p>
<h3 id="2-4、插入节点">2.4、插入节点</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  &lt;p id=<span class="string">&quot;js&quot;</span>&gt; Javascript&lt;/p&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;se&quot;</span>&gt;</span>JavaSE<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;ee&quot;</span>&gt;</span>JavaEE<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;me&quot;</span>&gt;</span>JavaME<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> js = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;js&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> 1ist = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;list&#x27;</span>);</span><br><span class="line">1ist.appendChild(js);<span class="comment">//追加到后面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过JS创建一个新的节点</span></span><br><span class="line"><span class="comment">//例如： &lt;p id=&quot;root&quot;&gt;我是文本&lt;/p&gt;</span></span><br><span class="line"><span class="comment">//方法一</span></span><br><span class="line"><span class="keyword">var</span> newP = <span class="built_in">document</span>.createElement(<span class="string">&#x27;p&#x27;</span>);<span class="comment">//创建一个p标签</span></span><br><span class="line">newP.id =<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">newP.innerText = <span class="string">&#x27;我是文本&#x27;</span>; <span class="comment">//设置标签内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line"><span class="keyword">var</span> text = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);<span class="comment">//创建一个p标签</span></span><br><span class="line"><span class="keyword">var</span> content = <span class="built_in">document</span>.createTextNode(<span class="string">&quot;我是文本&quot;</span>)<span class="comment">//创建文本</span></span><br><span class="line"><span class="keyword">var</span> id = <span class="built_in">document</span>.createAttribute(<span class="string">&quot;id&quot;</span> )<span class="comment">//创建id属性</span></span><br><span class="line">id.value = <span class="string">&quot;root&quot;</span><span class="comment">//id值</span></span><br><span class="line">  <span class="comment">//appendChild: 将内容或者子元素放到容器中，也即是追加</span></span><br><span class="line">text.appendChild(content);</span><br><span class="line">text.setAttributeNode(id);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如何渲染到页面呢？——&gt; 对页面上的某标签里使用appendChild追加到里面即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一一个标签节点.</span></span><br><span class="line"><span class="comment">// 例如： &lt;script type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="keyword">var</span> myScript = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span> );</span><br><span class="line">myScript.setAttribute(<span class="string">&#x27;type&#x27;</span>，<span class="string">&#x27;text/javascript&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="2-5、Element-属性">2.5、Element 属性</h3>
<p>Element 对象对应网页的 HTML 元素。每一个 HTML 元素，在 DOM 树上都会转化成一个 Element 节点对象(以下简称元素节点)</p>
<h4 id="2-5-1、Element-id">2.5.1、<a href="http://Element.id">Element.id</a></h4>
<p><code>Elementid</code>属性返回指定元素的 id 属性，该属性可读写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML代码为&lt;p id=&quot;foo&quot;&gt;</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.querySelector(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">p.id; <span class="comment">//&#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-5-2、Element-className">2.5.2、Element.className</h4>
<p><code>className</code>属性用来读写当前元素节点的 class 属性。它的值是一个字符串，每个 class 之间用空格分割</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML代码&lt;div class=&quot;one two three&quot; id=&quot;myDiv&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>. getElementById( myDiv<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">div.c1assName</span></span><br></pre></td></tr></table></figure>
<h4 id="2-5-3、Element-classList">2.5.3、Element.classList</h4>
<p><code>classList</code>对象有下列方法</p>
<ul>
<li>add():增加一个 class。</li>
<li>remove():移除一个 class。</li>
<li>contains() :检查当前元素是否包含某个 class。</li>
<li>toggle():将某个 class 移入或移出当前元素。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;myDiv&#x27;</span>);</span><br><span class="line">div.classList.add(<span class="string">&#x27;myCssClass&#x27;</span>);</span><br><span class="line">div.classList.add(<span class="string">&#x27;foo&#x27;</span>，<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line">div.classList.remove(<span class="string">&#x27;myCssClass&#x27;</span>);</span><br><span class="line">div.classList.toggle(<span class="string">&#x27;myCssClass&#x27;</span>); <span class="comment">//如果myCssClass不存在就加入，否则移除</span></span><br><span class="line">div.classList.contains(<span class="string">&#x27;myCssClass&#x27;</span>); <span class="comment">//返回true或者false</span></span><br></pre></td></tr></table></figure>
<h4 id="2-5-4、Element-innerHTML">2.5.4、Element.innerHTML</h4>
<p><code>ElementinerHTML</code>属性返回一个字符串，等同于该元素包含的所有 HTML 代码。该属性可读写，常用来设置某个节点的内容。它能改写所有元素节点的内容，包括<code>&lt;HTML&gt;</code> 和<code>&lt;body&gt;</code>元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">e1.innerHTML = <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="2-5-5、Element-innerText">2.5.5、Element.innerText</h4>
<p><code>innerText</code>和<code>nnerHTML</code> 类似,不同的是<code>innerText</code>无法识别元素,会直接渲染成字符串</p>
<h3 id="2-6、Element-获取元素位置">2.6、Element 获取元素位置</h3>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>clientHeight</td>
<td>获取元素高度包括 padding 部分，但是不包括 border、margin</td>
</tr>
<tr>
<td>document.documentElement.clientHeight</td>
<td>获取视口高度(屏幕高度)</td>
</tr>
<tr>
<td>doucument.body.clientHeight</td>
<td>获取页面的高度</td>
</tr>
<tr>
<td>clientWidth</td>
<td>获取元素宽度包括 padding 部分，但是不包括 border、margin</td>
</tr>
<tr>
<td>scrollHeight</td>
<td>元素总高度,它包括 padding ,但是不包括 border、margin 包括溢出的不可见内容</td>
</tr>
<tr>
<td>scrollWidth</td>
<td>元素总宽度，它包括 padding，但是不包括 border、margin 包括溢出的不可见内容</td>
</tr>
<tr>
<td>scrollLeft</td>
<td>元素的水平滚动条向右滚动的像素数量</td>
</tr>
<tr>
<td>scrollTop</td>
<td>元素的垂直滚动条向下滚动的像素数量</td>
</tr>
<tr>
<td>offsetHeight</td>
<td>元素的 CSS 垂直高度(单位像素)，包括元素本身的高度、padding 和 border</td>
</tr>
<tr>
<td>offsetWidth</td>
<td>元素的 CSS 水平宽度(单位像素)，包括元素本身的高度、 padding 和 border</td>
</tr>
<tr>
<td>offsetLeft</td>
<td>到定位父级左边界的间距</td>
</tr>
<tr>
<td>offsetTop</td>
<td>到定位父级上边界的间距</td>
</tr>
</tbody>
</table>
<h2 id="3、操作-CSS-样式">3、操作 CSS 样式</h2>
<h3 id="3-1、HTML-元素的-style-属性">3.1、HTML 元素的 style 属性</h3>
<p>操作 CSS 样式最简单的方法，就是使用网页元素节点的 setAtribute 方法直接操作网页元素的 style 属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">div.setAttribute(</span><br><span class="line"> <span class="string">&#x27;style&#x27;</span>，<span class="comment">//参数一</span></span><br><span class="line"><span class="string">&#x27; background-color:red;&#x27;</span> + <span class="string">&#x27;border:1px solid black;&#x27;</span><span class="comment">//参数二</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="3-2、元素节点的-style-属性">3.2、元素节点的 style 属性</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> divstyle = <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>).style;</span><br><span class="line"></span><br><span class="line">divsty1e.backgroundcolor = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">divStyle.border = <span class="string">&quot;1px solid black&quot;</span>;</span><br><span class="line">divStyle.width = <span class="string">&quot; 100px&quot;</span>;</span><br><span class="line">divStyle.height = <span class="string">&quot; 100px&quot;</span>;</span><br><span class="line">divStyle.fontSize = <span class="string">&quot; 10em&quot;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="3-3、cssText-属性">3.3、cssText 属性</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> divstyle = <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>).style;</span><br><span class="line"></span><br><span class="line">divSty1e.cssText =</span><br><span class="line">  <span class="string">&quot; background-co1or: red;&quot;</span> +</span><br><span class="line">  <span class="string">&quot;border: 1px solid black;&quot;</span> +</span><br><span class="line">  <span class="string">&quot;height: 100px;&quot;</span> +</span><br><span class="line">  <span class="string">&quot;width: 100px;&quot;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="4、事件处理">4、事件处理</h2>
<p>事件处理程序分为:</p>
<ul>
<li>HTML 事件处理</li>
<li>DOMO 级事件处理</li>
<li>DOM2 级事件处理</li>
</ul>
<h3 id="4-1、HTML-事件处理">4.1、HTML 事件处理</h3>
<p><img data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ebb4ad072de4845b971fac1b87eb149~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"><br>
HTML 事件:缺点: HTML 和 JS 没有分开</p>
<h3 id="4-2、DOMO-级事件处理">4.2、DOMO 级事件处理</h3>
<p><img data-src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ef1eb97f57847cb981e6909f3beab6c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"><br>
DOM0 事件:优点: HTML 和 IS 是分离的</p>
<p>缺点:无法同时添加多个事件</p>
<h3 id="4-3、DOM2-级事件处理">4.3、DOM2 级事件处理</h3>
<p><img data-src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e0d5a52dfb4943b280bded85124608b8~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"><br>
DOM2 事件:优点:事件不会被覆盖</p>
<p>缺点:写起来麻烦</p>
<h2 id="5、鼠标事件">5、鼠标事件</h2>
<p>鼠标事件指与鼠标相关的事件，具体的事件主要有以下一些</p>
<table>
<thead>
<tr>
<th>事件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>click</td>
<td>按下鼠标时触发</td>
</tr>
<tr>
<td>dblclick</td>
<td>在同一个元素上双击鼠标时触发</td>
</tr>
<tr>
<td>mousedown</td>
<td>按下鼠标键时触发</td>
</tr>
<tr>
<td>mouseup</td>
<td>释放按下的鼠标键时触发</td>
</tr>
<tr>
<td>mousemove</td>
<td>当鼠标在节点内部移动时触发。当鼠标持续移动时，该事件会连触发。</td>
</tr>
<tr>
<td>mouseenter</td>
<td>鼠标进入一个节点时触发，进入子节点不会触发这个事件</td>
</tr>
<tr>
<td>mouseleave</td>
<td>鼠标离开一个节点时触发,离开父节点不会触发这个事件</td>
</tr>
<tr>
<td>mouseover</td>
<td>鼠标进入-个节点时触发,进入子节点会再一次触发这个事件</td>
</tr>
<tr>
<td>mouseout</td>
<td>鼠标离开一个节点时触发,离开父节点也会触发这个事件</td>
</tr>
<tr>
<td>wheel</td>
<td>滚动鼠标的滚轮时触发</td>
</tr>
</tbody>
</table>
<h2 id="6、Event-事件">6、Event 事件</h2>
<p>事件发生以后，会产生一个事件对象,作为参数传给监听函数</p>
<p>Event 对象属性</p>
<ul>
<li>Event.Target</li>
<li>Event.type</li>
</ul>
<h3 id="6-1、Event-target">6.1、Event.target</h3>
<p><code>Event.target</code>属性返回事件当前所在的节点(点击谁就返回)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML代码为</span></span><br><span class="line"><span class="comment">// &lt;p id=&quot;para&quot;&gt;Hello&lt;/p&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCo1or</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span> === e.target);</span><br><span class="line">  e.target.style.color = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">para.addEventListener(<span class="string">&quot;click&quot;</span>, setCo1or);</span><br></pre></td></tr></table></figure>
<h3 id="6-2、Event-type">6.2、Event.type</h3>
<p><code>Event.type</code>属性返回一一个字符串,表示事件类型。事件的类型是在生成事件的时候。该属性只读</p>
<h2 id="7、Event-对象万法">7、Event 对象万法</h2>
<ul>
<li>Event.preventDefault()</li>
<li>Event.stopPropagation()</li>
</ul>
<h3 id="7-1、Event-preventDefault">7.1、Event.preventDefault</h3>
<p><code>Event.preventDefault</code>方法取消浏览器对当前事件的默认行为。比如点击链接后,浏览器默认会跳转到另一个页面，使用这个方法以后，就不会跳转了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn. onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  e.preventDefault(); <span class="comment">//阻止默认事件</span></span><br><span class="line">  <span class="built_in">console</span>.1og(<span class="string">&quot;点击A标签&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7-2、Event-stopPropagation">7.2、Event.stopPropagation()</h3>
<p><code>stopPropagation</code>方法阻止事件在 DOM 中继续传播,防止再触发定义在别的节点上的监听函数, 但是不包括在当前节点上其他的事件监听函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn. onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"> e. stopPropagation(); <span class="comment">// 阻止事件冒泡</span></span><br><span class="line"> <span class="built_in">console</span>.1og(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单点说，<strong>事件冒泡</strong>就是事件从子级传递到了父级；也就是子级事件发生了，父级就算没有该事件但是也会发生（父子之间相互嵌套）</p>
<h2 id="8、键盘事件">8、键盘事件</h2>
<p>键盘事件由用户击打键盘触发，主要有<code>keydown</code> ,<code>keypress</code> ,<code>keyup</code>三个事件</p>
<ul>
<li>keydown:按下键盘时触发。</li>
<li>keypress: 按下有值的键时触发，即按下 Ctrl. Alt、 Shift、 Meta 这样无值的键，这个事件不会触发。对于有值的键， 按下时先触发 keydown 事件，再触发这个事件。</li>
<li>keyup:松开键盘时触发该事件</li>
</ul>
<h3 id="8-1、keydown">8.1、keydown</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">username.onkeypress = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>. 1og(<span class="string">&quot;keypress事件&quot;</span>);</span><br><span class="line"><span class="regexp">/ /</span>也可以获取到该元素的值</span><br><span class="line"><span class="built_in">console</span>.log(e.target.value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8-2、keyCode-唯一标识">8.2、keyCode;唯一标识</h3>
<p>每个键盘案件都有唯一标识用<code>e.keyCode</code>获取</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> username = <span class="built_in">document</span>.getElementById<span class="string">&quot;username&quot;</span>);</span><br><span class="line"> username . onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(e. keyCode === <span class="number">13</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>.1og(<span class="string">&quot;回车&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="9、表单事件">9、表单事件</h2>
<p>表单事件是在使用表单元素及输入框元素可以监听的一系列事件</p>
<ul>
<li>input 事件</li>
<li>select 事件</li>
<li>Change 事件</li>
<li>reset 事件</li>
<li>submit 事件</li>
</ul>
<h3 id="9-1、input-事件">9.1、input 事件</h3>
<p>input 事件当<code>&lt;input&gt;</code>.<code> &lt;select&gt;</code>. <code>&lt;textarea&gt;</code> 的值发生变化时触发。对于复选框( <code>&lt;input type=checkbox&gt; </code>)或单选框( <code>&lt;input type=radio&gt;</code>)，用户改变选项时，也会触发这个事件</p>
<p>input 事件的一个特点，就是会连续触发，比如用户每按下一次按键， 就会触发一次 input 事件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> username = <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>) ;</span><br><span class="line">username.oninput = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.1og(e.target.value) ;<span class="comment">//读取数据</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="9-2、select-事件">9.2、select 事件</h3>
<p>select 事件当在<code>&lt;input.textarea&gt; </code>里面选中文本时触发</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML代码如下</span></span><br><span class="line"> <span class="comment">// &lt;input id=&quot;test&quot; type=&quot;text&quot; value=&quot;Select me!&quot; /&gt;</span></span><br><span class="line"> <span class="keyword">var</span> elem = <span class="built_in">document</span>. getElementById(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"> elem. addEventL istener(<span class="string">&#x27;select&#x27;</span>， <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.1og(e. type); <span class="comment">// &quot;select&quot;</span></span><br><span class="line"> &#125;，<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<h3 id="9-3、Change-事件">9.3、Change 事件</h3>
<p><code>Change</code>事件当<code>&lt;input&gt;</code>.<code> &lt;select&gt;</code>. <code>&lt;textarea&gt;</code>的值发生变化时触发。它与 input 事件的最大不同，就是不会连续触发，只有当全部修改完成时才会触发</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> email = <span class="built_in">document</span> . getElementById(<span class="string">&quot;email&quot;</span>);</span><br><span class="line"> email . onchange = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.1og(e. target. value);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="9-4、reset-事件-submit-事件">9.4、reset 事件, submit 事件</h3>
<p>这两个事件发生在表单对象<code>&lt;form&gt;</code>上，而不是发生在表单的成员上。</p>
<ul>
<li>reset 事件当表单重置(所有表单成员变回默认值)时触发。</li>
<li>submit 事件当表单数据向服务器提交时触发。注意, submit 事件的发生对象是<code>&lt;orm&gt;</code>元素,而不是<code>&lt;button&gt;</code>元素，因为提交的是表单，而不是按钮</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;form id=<span class="string">&quot;myForm&quot;</span> onsubmi t=<span class="string">&quot;submi tHand1e&quot;</span>&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">oncli</span> <span class="attr">ck</span>=<span class="string">&quot;resetHandle&quot;</span>&gt;</span>重置数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"> &lt;/form&gt;</span><br><span class="line"> <span class="keyword">var</span> myForm = <span class="built_in">document</span>. getE1 ementById(<span class="string">&quot;myForm&quot;</span>)</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">resetHandle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    myForm. reset() ;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">submi</span> <span class="title">tHandle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.1og(<span class="string">&quot;提交&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="10、操作表单">10、操作表单</h2>
<p>操作表单就是 form DOM 树，他有</p>
<ul>
<li>文本框，对应的<code>&lt;input type=&quot;text&quot;&gt;</code>，用于输入文本；</li>
<li>口令框，对应的<code>&lt;input type=&quot;password&quot;&gt;</code>，用于输入口令；</li>
<li>单选框，对应的<code>&lt;input type=&quot;radio&quot;&gt;</code>，用于选择一项；</li>
<li>复选框，对应的<code>&lt;input type=&quot;checkbox&quot;&gt;</code>，用于选择多项；</li>
<li>下拉框，对应的<code>&lt;select&gt;</code>，用于选择一项；</li>
<li>隐藏文本，对应的<code>&lt;input type=&quot;hidden&quot;&gt;</code>，用户不可见，但表单提交时会把隐藏文本发送到服务器。</li>
</ul>
<h3 id="10-1、获得表单信息">10.1、获得表单信息</h3>
<p>如果我们获得了一个<code>&lt;input&gt;</code>节点的引用，就可以直接调用<code>value</code>获得对应的用户输入值，并且还适用于<code>text</code>、<code>password</code>、<code>hidden</code>以及<code>select</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &lt;input type=&quot;text&quot; id=&quot;email&quot;&gt;</span></span><br><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">input.value; <span class="comment">// &#x27;用户输入的值&#x27;</span></span><br></pre></td></tr></table></figure>
<p>也可以自己设置值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input.value = &#x27;test@example.com&#x27;; // 文本框的内容已更新</span><br></pre></td></tr></table></figure>
<p>对于单选框和复选框，<code>value</code>属性返回的永远是 HTML 预设的值，而我们需要获得的实际是用户是否“勾上了”选项，所以应该用<code>checked</code>判断：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;weekday&quot; id=&quot;monday&quot; value=&quot;1&quot;&gt; Monday&lt;/label&gt;</span></span><br><span class="line"><span class="comment">// &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;weekday&quot; id=&quot;tuesday&quot; value=&quot;2&quot;&gt; Tuesday&lt;/label&gt;</span></span><br><span class="line"><span class="keyword">var</span> mon = <span class="built_in">document</span>.getElementById(<span class="string">&quot;monday&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> tue = <span class="built_in">document</span>.getElementById(<span class="string">&quot;tuesday&quot;</span>);</span><br><span class="line">mon.value; <span class="comment">// &#x27;1&#x27;</span></span><br><span class="line">tue.value; <span class="comment">// &#x27;2&#x27;</span></span><br><span class="line">mon.checked; <span class="comment">// true或者false</span></span><br><span class="line">tue.checked; <span class="comment">// true或者false</span></span><br></pre></td></tr></table></figure>
<h3 id="10-2、提交表单">10.2、提交表单</h3>
<p>浏览器默认点击<code>&lt;button type=&quot;submit&quot;&gt;</code>时提交表单，或者用户在最后一个输入框按回车键。因此，可以在提交 form 时作修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- HTML --&gt;</span><br><span class="line">&lt;form id=&quot;test-form&quot; onsubmit=&quot;return checkForm()&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;test&quot;&gt;</span><br><span class="line">    &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">function checkForm() &#123;</span><br><span class="line">    var form = document.getElementById(&#x27;test-form&#x27;);</span><br><span class="line">    // 可以在此修改form的input...</span><br><span class="line">    // 继续下一步:</span><br><span class="line">    return true; //告诉浏览器继续提交</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>可以利用<code>&lt;input type=&quot;hidden&quot;&gt;</code>实现提交表单时不传输明文口令</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;login-form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return checkForm()&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--用户名--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--用户输入的密码，因为没有name使用密码不会被提交--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input-password&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">id</span>=<span class="string">&quot;md5-password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">checkForm</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> input_pwd = <span class="built_in">document</span>.getElementById(<span class="string">&quot;input-password&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> md5_pwd = <span class="built_in">document</span>.getElementById(<span class="string">&quot;md5-password&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 把用户输入的明文变为MD5:</span></span></span><br><span class="line"><span class="javascript">    md5_pwd.value = toMD5(input_pwd.value);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 继续下一步:</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="11、事件代理（事件委托）">11、事件代理（事件委托）</h2>
<p>前面已经说过什么是事件冒泡，那么现在由于事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上,由父节点的监听函数统一处理多个子元素的事件。这种方法叫做事件的代理(<strong>delegation</strong>)</p>
<p>以无序列表为例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span> . querySelector(<span class="string">&#x27;ul&#x27;</span>); <span class="comment">//父级</span></span><br><span class="line">ul. addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line"><span class="comment">//获取li标签具体内容</span></span><br><span class="line">    <span class="keyword">if</span> (event.target.tagName.toLowercase() === <span class="string">&#x27;li&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log( event. target. innerHTML);</span><br><span class="line">       <span class="comment">//some code</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="12、定时器">12、定时器</h2>
<p>JavaScript 提供定时执行代码的功能，叫做定时器(timer), 主要 由<code>setTimeout()</code>和<code>setinterva()</code> 这两个函数来完成。.它们向任务队列添加定时任务</p>
<h3 id="12-1、setTimeout">12.1、setTimeout</h3>
<p>setTimeout 函数用来指定某个函数或某段代码，在多少毫秒之后执行。它返回一个整数,表示定时器的编号，以后可以用来取消这个定时器。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timerId = <span class="built_in">setTimeout</span>(func|code， delay);</span><br></pre></td></tr></table></figure>
<p>setTimeout 函数接受两个参数,第一个参数 funclode 是将要推迟执行的函数名或者一段代码, 第二个参数 delay 是推迟执行的毫秒数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.1og(<span class="string">&quot;定时器&quot;</span>)</span><br><span class="line">&#125;，<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<p>定时器可以进行取消</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> id = <span class="built_in">setTimeout</span>(f, <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">clearTimeout</span>(id);</span><br></pre></td></tr></table></figure>
<p>注意： 在定时器里的 this 关键字指向全局环境</p>
<h3 id="12-2、setInterval">12.2、setInterval</h3>
<p>setInterval 函数的用法与 setTimeout 完全-致， 区别仅仅在于 setnterval 指定某个任务每隔一段时间就执行一次, 也就是无限次的定时执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.1og(<span class="number">2</span>);</span><br><span class="line"> &#125;，<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<h1>九、jQurey</h1>
<h2 id="1、jQurey-引入">1、jQurey 引入</h2>
<p>在 jQurey 的<a href="https://jquery.com/">官网</a>下载，会弹出<a href="https://jquery.com/download/">链接</a>，右击链接另存为就可以，然后复制到你的项目里就完成了本地导入</p>
<p><img data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4267d0c49967468089c15de8d6709803~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<p>你的项目下面就会出现一个 jquery 的 js 文件</p>
<p><img data-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca9ad623eca64c93bb3afaf240dc35fe~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>
<h2 id="2、基本语法">2、基本语法</h2>
<p><strong>$(选择器).action()</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;&quot;</span> id=<span class="string">&quot;test -jquery&quot;</span>&gt;</span><br><span class="line">  点我</span><br><span class="line">&lt;/a&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择器就是css的选择器</span></span><br><span class="line">$(<span class="string">&quot;#test-jquery&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;he1lo, jQuery&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原生js，选择器少，麻烦不好记</span></span><br><span class="line"><span class="comment">//标签</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName();</span><br><span class="line"><span class="comment">//id</span></span><br><span class="line"><span class="built_in">document</span>.getElementById();</span><br><span class="line"><span class="comment">//类</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName();</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).click(); <span class="comment">//标签选择器</span></span><br><span class="line">$(<span class="string">&quot;#id1&quot;</span>).click(); <span class="comment">//id选择器</span></span><br><span class="line">$(<span class="string">&quot;.class1&quot;</span>).click(); <span class="comment">//class选择器</span></span><br></pre></td></tr></table></figure>
<h2 id="3、事件">3、事件</h2>
<h3 id="3-1、鼠标事件">3.1、鼠标事件</h3>
<ul>
<li>click: 鼠标单击时触发；</li>
<li>dblclick：鼠标双击时触发；</li>
<li>mouseenter：鼠标进入时触发；</li>
<li>mouseleave：鼠标移出时触发；</li>
<li>mousemove：鼠标在 DOM 内部移动时触发；</li>
<li>hover：鼠标进入和退出时触发两个函数，相当于 mouseenter 加上 mouseleave。</li>
</ul>
<h3 id="3-2、键盘事件">3.2、键盘事件</h3>
<p>键盘事件仅作用在当前焦点的 DOM 上，通常是<code>&lt;input&gt;</code>和<code>&lt;textarea&gt;</code>。</p>
<ul>
<li>keydown：键盘按下时触发；</li>
<li>keyup：键盘松开时触发；</li>
<li>keypress：按一次键后触发。</li>
</ul>
<h3 id="3-3、其他事件">3.3、其他事件</h3>
<ul>
<li>focus：当 DOM 获得焦点时触发；</li>
<li>blur：当 DOM 失去焦点时触发；</li>
<li>change：当<code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>或<code>&lt;textarea&gt;</code>的内容改变时触发；</li>
<li>submit：当<code>&lt;form&gt;</code>提交时触发；</li>
<li>ready：当页面被载入并且 DOM 树完成初始化后触发。</li>
</ul>
<h2 id="操作-DOM-元素">操作 DOM 元素</h2>
<p>jQuery 对象的<code>text()</code>和<code>html()</code>方法分别获取节点的文本和原始 HTML 文本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- HTML结构 --&gt;</span><br><span class="line">&lt;ul id=&quot;test-ul&quot;&gt;</span><br><span class="line">    &lt;li class=&quot;js&quot;&gt;JavaScript&lt;/li&gt;</span><br><span class="line">    &lt;li name=&quot;book&quot;&gt;Java &amp;amp; JavaScript&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<p>分别获取文本和 HTML：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#test-ul li[name=book]&quot;</span>).text(); <span class="comment">// &#x27;Java &amp; JavaScript&#x27;</span></span><br><span class="line">$(<span class="string">&quot;#test-ul li[name=book]&quot;</span>).html(); <span class="comment">// &#x27;Java &amp;amp; JavaScript&#x27;</span></span><br></pre></td></tr></table></figure>
<p>节点文本操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot; #test-u11i [name=python]&quot;</span>).text(); <span class="comment">//获得值</span></span><br><span class="line">$(<span class="string">&quot; #test-u1 1i [name=python]&quot;</span>).text(<span class="string">&quot;设置值&quot;</span>); <span class="comment">//设置值</span></span><br><span class="line">$(<span class="string">&quot; #test-u1&quot;</span>).htm1(); <span class="comment">//获得值</span></span><br><span class="line">$(<span class="string">&quot; #test-u1&quot;</span>).htm7(<span class="string">&quot;&lt;strong&gt;123&lt;/strong&gt;&quot;</span>); <span class="comment">//设置值</span></span><br></pre></td></tr></table></figure>
<p>CSS 的操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27; #test-u1 1i [name=python]&#x27;</span>). css(&#123;<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>元素的显示和隐藏:本质<code>display :none</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot; #test-u11i [name=python] &quot;</span>).show();</span><br><span class="line">$(<span class="string">&quot; #test-u1 1i [name=python]&quot;</span>).hide();</span><br></pre></td></tr></table></figure>
<h1>总结</h1>
<p><strong>如果有误，欢迎指错纠正</strong></p>
<h2 id="参考文档">参考文档</h2>
<p><a href="https://www.liaoxuefeng.com/wiki/1022910821149312">廖雪峰–JavaScript 教程</a></p>
<p><a href="https://jquery.cuishifeng.cn/">jQuery 文档</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JS</tag>
      </tags>
  </entry>
</search>
