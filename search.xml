<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>低成本博客与多端同步笔记</title>
    <url>/c1262c9c/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<ol>
<li>本文档不是手把手教程</li>
<li>博客是使用hexo+next主题魔改搭建到github</li>
</ol>
<h2 id="1-我的需求">1. 我的需求</h2>
<ol>
<li>编辑笔记方便，一般使用md语法，需要放图片在笔记里</li>
<li>有内容产出，需要很方便的发布博客，方便全局搜索，也方便查看</li>
<li>数据可靠，喜欢把数据放在本地，管理方便自由程度高</li>
<li>多端同步，很多时候在平板上也需要有笔记产出，主要电脑编辑，其他设备查看</li>
<li>数据备份很重要</li>
<li>长期使用需要低成本</li>
</ol>
<h2 id="2-解决思路">2. 解决思路</h2>
<h3 id="2-1-笔记软件选择">2.1 笔记软件选择</h3>
<p>市面上很多笔记软件较为有代表性的：</p>
<ul>
<li>神中神Typora：我很长一段时间都是用的Typora，Typora支持所见即所得的编辑模式。插入图片时，可以在界面上直接粘贴，Typora会自己把图片复制到指定的目录，Typora还能粘贴网页上带格式的富文本，自动转换成Markdown，但是功能也就局限于md编辑的良好体验上，没有多平台，不能满足我的大多数需求</li>
<li>obsidian：插件丰富，拓展性强，具备了md 的 大部分功能，虽然粘贴自动转换成Markdown的功能没有Typora好用，但是无伤大雅，具备丰富的插件更能适配我的较高需求，而且多平台都有软件</li>
<li>印象笔记、语雀、Effie，等等等等，数据都没在本地，直接排除</li>
</ul>
<p>所以选择obsidian作为编辑笔记软件</p>
<h3 id="2-2-多端同步">2.2 多端同步</h3>
<p><strong>笔记编辑的图片问题：</strong><br>
之前使用图床+piclist进行图片上传，这样就不需要担心图片怎么上传到博客的问题，但是在图片的管理方面显得不太方便，较为杂乱，假如图片要更新，还需要在piclist里手动删除云端的图片，所以图片还是放在本地，随着博客一起上传</p>
<p><strong>多端同步成本问题：</strong><br>
obsidian有官方同步、有同步插件，等等，详细可以见：<a href="https://forum-zh.obsidian.md/t/topic/29995">对已知的obsidian同步方式进行整理</a>我这里综合考量使用的微力同步，免费，可以使用自己的私有节点进行同步，数据安全有保障，并且他是同步文件夹，这就意味着可以在其他端同步obsidian的主题、插件等，满足需求。</p>
<h3 id="2-3-数据备份">2.3 数据备份</h3>
<p>这里选择很宽泛，也有很多的云盘同步备份策略，甚至可以上nas，我这里选择github，通过git提交数据到github的私有库+百度云自动备份+隔几周手动备份到移动硬盘</p>
<h3 id="2-4-便捷部署到博客">2.4 便捷部署到博客</h3>
<p>很幸运我在搜索相关内容的时候，发现了一篇宝藏文章，不仅为我提供了思路，还给出了Hexo的魔改代码：<a href="https://www.paincker.com/note-and-blog-system/">构建自己的笔记博客系统（程序员版）</a>可以参考其操作以及开源库</p>
<h2 id="3-步骤">3. 步骤</h2>
<h3 id="3-1-笔记软件配置">3.1 笔记软件配置</h3>
<ol>
<li>多端安装obsidan</li>
<li>安装插件：
<ol>
<li>Clear Unused Images ：清除不使用的图片</li>
<li>Consistent Attachments and Links ： 插件可以设置把文章的图片都放在平级的images目录中，如果移动笔记，对应的图片也会被移动 （<strong>必须</strong>）</li>
<li>Markdown prettifier ： 整理Markdown格式</li>
<li>Mousewheel Imagezoom ： 能够通过滚动来增加/减少图像的大小</li>
<li>Templater ： 用来配置博客的Front-matter，参考文章：<a href="https://itreefly.com/posts/e5113722.html">Hexo和Obsidian：让个人博客写作更加优雅、高效</a> （<strong>必须</strong>）</li>
<li>Unique attachments ：使图片链接的名称唯一（基于文件内容的哈希值）</li>
</ol>
</li>
</ol>
<h3 id="3-2-多端同步配置">3.2 多端同步配置</h3>
<ol>
<li>多端下载微力同步</li>
<li><a href="https://www.verysync.com/manual/users/start.html">配置同步</a></li>
</ol>
<h3 id="3-3-快捷发布博客">3.3 快捷发布博客</h3>
<ol>
<li>使用 <a href="https://github.com/jzj1993/PublishMarkdown">https://github.com/jzj1993/PublishMarkdown</a> 搭建hexo博客</li>
<li>先在本地跑起来，记得把测试文件移入<code>_posts</code>文件夹下</li>
<li>发布到github 参考：<a href="https://blog.soilove.cn/2020/06/14/blog-hexo-2-github-or-oss/#:~:text=Hexo%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA,%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E5%8F%91%E5%B8%83%E3%80%82">使用Github或阿里云OSS托管你的Hexo博客</a></li>
<li>自定义hexo主题 参考：<a href="https://blog.csdn.net/as480133937/article/details/100138838">Hexo-Next 主题博客个性化配置超详细，超全面(两万字)</a></li>
<li>创建软连接，obsidian里的<code>Notes\blog </code>-&gt; 博客里<code> Blog\source\_posts</code> 这样编辑完文章只要把改文章拖到obsidian的blog目录下，就放在了博客文章目录里</li>
<li>创建<code>deploy.sh</code>的快捷链接，放到obsidian的一个目录里，点一下就可以增量部署到博客</li>
</ol>
<h3 id="3-4-补充">3.4 补充</h3>
<p>其他插件：</p>
<ul>
<li>笔记分享：可以用Pandoc插件的导出功能，把Markdown导出成HTML / Word / PDF文件分享给其他人。</li>
<li>笔记同步：在Obsidian的Terminal插件提供的窗口中运行git命令，把最新的博客push到私有git仓库。也可以选择用Obsidian Git插件把数据同步上去。在其他设备上通过git再把变更同步下来。</li>
</ul>
<p>参考文章：</p>
<ul>
<li><a href="https://forum-zh.obsidian.md/t/topic/29995">对已知的obsidian同步方式进行整理</a></li>
<li><a href="https://www.paincker.com/note-and-blog-system/">构建自己的笔记博客系统（程序员版）</a></li>
<li><a href="https://itreefly.com/posts/e5113722.html">Hexo和Obsidian：让个人博客写作更加优雅、高效</a></li>
<li><a href="https://blog.soilove.cn/2020/06/14/blog-hexo-2-github-or-oss/#:~:text=Hexo%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA,%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E5%8F%91%E5%B8%83%E3%80%82">使用Github或阿里云OSS托管你的Hexo博客</a></li>
<li><a href="https://blog.csdn.net/as480133937/article/details/100138838">Hexo-Next 主题博客个性化配置超详细，超全面(两万字)</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Docker笔记</title>
    <url>/45d92c83/</url>
    <content><![CDATA[<h2 id="基本概念和原理">基本概念和原理</h2>
<p><img data-src="/blog-imgs/deploy/docker/attachments/68eb696d4a771101f1b4fe2bf4645511.png" alt="|625"></p>
<ul>
<li>镜像：类似Java中的类，或者说是一个软件，只读</li>
<li>容器：类似Java中类的对象实例，运行中的软件，可读可写</li>
<li>仓库：docker镜像分享合集，docker pull ；先找本地再找远程，<a href="https://hub.docker.com/">dockerhub</a></li>
<li>docker daemon：服务端守护进程，管理docker的各种资源</li>
<li>docker client：客户端发送命令和docker daemon进行交互</li>
</ul>
<h2 id="安装docker">安装docker</h2>
<ol>
<li>
<p>在官网选择对应的操作系统，选择教程进行安装：<a href="https://docs.docker.com/engine/install/">https://docs.docker.com/engine/install/</a></p>
</li>
<li>
<p>可以使用官方脚本自动安装：curl -fsSL <a href="https://get.docker.com">https://get.docker.com</a> | bash -s docker --mirror Aliyun</p>
</li>
<li>
<p>检查是否安装成功</p>
<ol>
<li>开机自启动：sudo systemctl enable docker</li>
<li>启动docker：sudo systemctl start docker （stop停止）</li>
<li>查看docker版本：docker version</li>
<li>查看状态：sudo systemctl status docker</li>
<li>下载测试映像并在容器中运行hello word测试：sudo docker run hello-world</li>
</ol>
</li>
<li>
<p>镜像加速：<a href="https://cr.console.aliyun.com/cn-hongkong/instances/mirrors">阿里云镜像加速器</a></p>
</li>
</ol>
<h2 id="容器化">容器化</h2>
<ol>
<li>创建Dockerfile</li>
<li>使用Dockerfile构建镜像</li>
<li>使用镜像创建和运行容器</li>
</ol>
<h2 id="基本操作">基本操作</h2>
<h3 id="镜像">镜像</h3>
<p><code>docker version</code> | docker引擎信息<br>
<code>docker info</code> | docker引擎详细信息<br>
<code>docker images</code>   |  查看当前有哪些镜像<br>
<code>docker image  -q  名称</code> |  查看指定镜像id<br>
<code>docker image  rm 名称（id）</code> |  删除镜像（未运行过的镜像）<br>
<code>docker image  rm -f 名称（id）</code> |  强制删除镜像<br>
<code>docker pull 名称 版本</code>  | 远程拉取镜像<br>
<code>docker search  名称</code> | 查看镜像是否存在<br>
<code>docker images rm -f $(docker images -q 名称)</code>   | 删除所有指定名称的镜像<br>
<code>docker  tag  旧镜像名 新镜像名</code> | 镜像改名</p>
<h3 id="容器">容器</h3>
<p><code>docker ps</code>  | 查看当前docker引擎正在运行的容器 ，加<code>-a</code> 查看所有的容器<br>
<code>docker run 镜像名称|镜像id</code>   |  运行容器，未映射<br>
<code>docker run -p8080(宿主机的端口):8080(容器的端口) 镜像名称|镜像id</code></p>
<blockquote>
<ul>
<li>建立映射 -p 运行（需要防火墙，映射后就进入白名单了），注意容器间端口的操作系统隔离，可以映射多个端口</li>
<li>添加-d 是后台（守护进程启动）</li>
<li>添加–name 名称 ，容器启动的唯一名称</li>
<li>不管顺序</li>
<li>跟着docker重启docker容器 <code> --restart=always</code></li>
</ul>
</blockquote>
<p><strong>数据卷</strong>：容器和主机的数据映射，容器首次启动时设置<br>
<code>docker run -v 宿主机目录:容器内目录</code> | 数据卷映射，始终与宿主机为主（会清空容器 ），<code>:ro</code>容器只读只能宿主机影响<br>
<code>docker run -v 别名:容器内目录</code> | 如果别名里没有内容则不清空容器，目录默认在<code>/var/lib/docker/volumes/</code>里面</p>
<p><code>docker stop 容器id|名称</code> | 停止<br>
<code>docker restart 容器id|名称</code> | 重启<br>
<code>docker start 容器id|名称</code> | 启动容器<br>
<code>docker pause 容器id|名称</code> | 暂停运行<br>
<code>docker unpause 容器id|名称</code> | 恢复运行<br>
<code>docker kill 容器id|名称</code> | 杀死容器<br>
<code>docker rm 容器id|名称</code> | 删除容器（已经 停止）<code>-f</code>强制删除，可以组合删除<br>
<code>docker logs 容器id|名称</code> | 容器日志 <code>-f</code> 实时监控容器，<code>-t</code> 展示时间<br>
<code>docker exec -it 容器id|名称 bash</code> | 交互模式进入容器，会切换成容器的bash终端<br>
<code>exit</code> 退出容器<br>
<code>docker cp 容器id:容器中文件或目录主机那个目录</code> | 将容器中指定文件和目录拷贝到宿主机<br>
<code>docker cp主机文件和目录 容器id:容器中目录</code> | 将主机中指定文件和目录拷贝到容器内</p>
<blockquote>
<p>如何部署一个web项目war包项 目</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a. 将test.war 上传到linxu服务器</span><br><span class="line">b. 通过docker cp命令将test.war复制到tomcat的webapps目录中即可</span><br><span class="line">c. ip端口测试访问</span><br></pre></td></tr></table></figure>
<p><code>docker top 容器id|名称</code> | 查看容器进程<br>
<code>docker inspect 容器id|名称</code> | 查看容器内部细节<br>
<strong>打包容器：</strong><br>
<code>docker commit -m &quot;提交信息&quot; -a &quot;作者&quot; 容器id|name 镜像名:版本</code><br>
<strong>镜像的备份和恢复:</strong><br>
<code>docker save 镜像名 -o 名称（名称-版本）.tar</code> | 打包镜像<br>
<code>docker load -i 名称.tar</code> | 载入镜像</p>
<h2 id="高级网络通信">高级网络通信</h2>
<p>docker容器间的通信，在创建docker容器的时候会有一对接口 一个叫<code>eth0</code>在容器内部, 一个以  <code>veth</code>开头被挂载到 <code>docker0</code>网桥（一个内一个外），一个接口接受数据时，另一个也会接受相同的数据，<strong>虚拟共享网络</strong></p>
<p>所以，默认容器间就可以通信！</p>
<ol>
<li><code>docker inspect 容器id|名称</code> | 查看容器内部细节</li>
<li>获得ip，进行通信，也可以使用容器名称进行通信（必须自定义网桥，不能再用docker0）</li>
<li>一般都是自定义，如果都走<code>docker0</code>一个网桥会影响通信</li>
</ol>
<p><code>docker network create 网络名称</code>  | 创建网桥<br>
<code>docker network ls</code>  | 查看网络<br>
<code>docker inspect network 网络名称</code> | 查看网络内部细节<br>
<code>docker network rm 网络名称</code>  | 删除指定网络<br>
<code>docker network prune</code>  | 删除所有未被用到的网络</p>
<p>对于容器启动前（后）都可以修改网络<br>
运行前：<code>--network 网络名称</code><br>
运行时：<code>docker network connect 网络名称 容器id|name</code></p>
<h2 id="Dockerfile">Dockerfile</h2>
<p>Dockerfile可以认为是<strong>Docker镜像的描述文件</strong>,是由一系列命令和参数构成的脚本。主要作<br>
用是用来<strong>构建docker镜像的构建文件</strong>。</p>
<p><code>docker build -t 名称:版本 .（dockerfile所在位置，就一个点就是当前目录）</code></p>
<p><strong>一行一个保留字</strong></p>
<table>
<thead>
<tr>
<th>保留字</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>FROM</td>
<td>当前镜像是基于哪个镜像的，第一个指令必须是FROM</td>
</tr>
<tr>
<td>MAINTAINER</td>
<td>镜像维护者的姓名和邮箱地址（废弃）</td>
</tr>
<tr>
<td>RUN</td>
<td>构建镜像时需要运行的指令，基于FROM的指定镜像</td>
</tr>
<tr>
<td>EXPOSE</td>
<td>当前容器对外暴露出的端口号，仅做声明作用</td>
</tr>
<tr>
<td>WORKDIR</td>
<td>指定在创建容器后,终端默认登录进来的工作目录, 一个落脚点</td>
</tr>
<tr>
<td>ENV</td>
<td>用来在构建镜像过程中设置环境变量，key=value 引用$key</td>
</tr>
<tr>
<td>ADD</td>
<td>将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar包</td>
</tr>
<tr>
<td>COPY</td>
<td>类似于ADD ,拷贝文件和目录到镜像中<br>将从构建上下文目录中&lt;原路径&gt;的文件/目录复制到新的一层的镜像内的<br>&lt;目标路径&gt;位置</td>
</tr>
<tr>
<td>VOLUME</td>
<td>容器数据卷,用于数据保存和持久化工作,仅做声明作用</td>
</tr>
<tr>
<td>CMD</td>
<td>指定一个容器启动时要运行的命令，Dockerfile中可以有多个CMD指令,但只有最后一个生效，CMD会被docker run之后的参数替换</td>
</tr>
<tr>
<td>ENTRYPOINT</td>
<td>指定-一个容器启动时要运行的命令<br>ENTRYPOINT的目的和CMD一样,都是在指定容器启动程序及其参数</td>
</tr>
<tr>
<td>## Docker-compose</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="引入">引入</h3>
<ul>
<li>容器启动顺序至关重要</li>
<li>多服务器部署变得困难</li>
</ul>
<p>docker-compose 实现docker容器集群的快速编排，<code>docker-compose.yml</code>就是应用（project，完整的业务单元），service，一个项目中的某一个容器，称为一个服务</p>
<h3 id="安装">安装</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载</span></span><br><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 权限</span></span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>
<h3 id="使用">使用</h3>
<p><code>docker-compose up [options] [SERVICE. ..]</code>  | 在docker-compose.yml配置文件目录启动docker-compose，该命令十分强大，它将尝试自动完成包括构建镜像，( 重新)创建服务，启动服务,并关联服务相关容器的一系列操作。链接的服务都将会被自动启动，除非已经处于运行状态。<code>-d</code> 将会在后台启动并运行所有的容器，默认情况，如果服务容器已经存在，会尝试停止容器,然后重新创建(保持使用<code>volumes -from</code>挂载的卷) ,以保证新启动的服务匹配<code>docker-compose.yml</code>文件的最新内容</p>
<p><code>docker-compose down</code> | 关闭所有容器,并移除网络</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker-compose版本</span></span><br><span class="line"><span class="string">version:&quot;3.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">	<span class="comment"># 服务名称</span></span><br><span class="line">	<span class="attr">tomcat:</span></span><br><span class="line">	<span class="comment"># 服务镜像</span></span><br><span class="line">	<span class="attr">images:</span> <span class="string">tomcat8.0</span> <span class="comment"># 镜像名称</span></span><br><span class="line">	<span class="attr">ports:</span> <span class="comment"># 端口映射</span></span><br><span class="line">		<span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span> </span><br><span class="line">	<span class="attr">environment:</span> <span class="comment"># 指定启动环境</span></span><br><span class="line">		<span class="bullet">-</span> </span><br><span class="line">	<span class="attr">volumens:</span> <span class="comment"># 指定数据卷,路径必须存在</span></span><br><span class="line">		<span class="bullet">-</span> <span class="string">/root/data:/var/lib</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumens:</span> <span class="comment"># 声明data卷</span></span><br><span class="line">	<span class="string">data：</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>build</code> 指令通过docker-compose在启动容器之前现根据Dockerfile构建镜像,然后根据构建镜像启动容器</li>
<li><code>comnand</code> 指令覆盖容器启动后默认执行的命令</li>
<li><code>container_name</code>指令用来指定docker-compose启动容器名称注意:不推荐指定容器名称</li>
<li><code>depends_ on</code>指令解决容器的依赖、启动先后的问题注意:当前服务不会等待被依赖服务「 完全启动」之后才启动</li>
<li><code>environment</code> 指令用来给容器启动指定环境变量相当于docker run -e选项</li>
<li><code>env_ file</code> 指令用来给容器启动指定环境变量文件相当于docker run -e选项</li>
<li><code>expose</code> 指令用来指定构建镜像过程中容器暴露的端口号</li>
<li><code>image</code> 指令用来指定启动容 器使用镜像是谁相当于docker run image(镜 像名)</li>
<li><code>networks</code> 指令用来指定 启动容器使用网桥相当于 docker run --network</li>
<li><code>ports</code> 指令用来指 定宿主机和容器端口映射相当于docker run -p</li>
<li><code>volunes</code> 指令用来指定宿主机中容器目录目录映射 docker run -v</li>
<li><code>restart</code>指令用来指定docker容器(服务)总是运行 docker run – rest art= always .</li>
</ul>
<h2 id="来源">来源</h2>
<p><a href="https://www.bilibili.com/video/BV11L411g7U1/?spm_id_from=333.337.search-card.all.click">Docker 1小时快速上手教程，无废话纯干货</a><br>
<a href="https://www.bilibili.com/video/BV1wQ4y1Y7SE/?p=1&amp;spm_id_from=pageDriver">【编程不良人】Docker&amp;Docker-Compose 实战!</a></p>
]]></content>
      <categories>
        <category>项目部署</category>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>容器</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
</search>
